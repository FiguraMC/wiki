{"searchDocs":[{"title":"ItemDisplayModes","type":0,"sectionRef":"#","url":"/enums/ItemDisplayModes","content":"","keywords":"","version":null},{"title":"Item Task Exclusive​","type":1,"pageTitle":"ItemDisplayModes","url":"/enums/ItemDisplayModes#item-task-exclusive","content":"When an item task's display mode is set transformations will be applied to make the item appear as if it's rendering in that circumstance. GUI : The transformations used by the item when being displayed in a GUI (the player's inventory for example)  GROUND : The transformations used by the item when it is dropped on the ground.  FIXED : The transformations used by the item while it is in an item frame.  NONE : Don't apply any transformations. ","version":null,"tagName":"h2"},{"title":"Universal​","type":1,"pageTitle":"ItemDisplayModes","url":"/enums/ItemDisplayModes#universal","content":"FIRST_PERSON_RIGHT_HAND : While in the first person right hand  FIRST_PERSON_LEFT_HAND : While in the first person left hand  THIRD_PERSON_RIGHT_HAND : While in the third person right hand  THIRD_PERSON_LEFT_HAND : While in the third person left hand  HEAD : While any item that isn't a head (player, mob, or dragon) or helmet is in your head slot. ","version":null,"tagName":"h2"},{"title":"KeybindsList","type":0,"sectionRef":"#","url":"/enums/Keybinds-List","content":"KeybindsList List of keybind ids key.keyboard.unknown key.mouse.left key.mouse.right key.mouse.middle key.mouse.4 key.mouse.5 key.mouse.6 key.mouse.7 key.mouse.8 key.keyboard.0 key.keyboard.1 key.keyboard.2 key.keyboard.3 key.keyboard.4 key.keyboard.5 key.keyboard.6 key.keyboard.7 key.keyboard.8 key.keyboard.9 key.keyboard.a key.keyboard.b key.keyboard.c key.keyboard.d key.keyboard.e key.keyboard.f key.keyboard.g key.keyboard.h key.keyboard.i key.keyboard.j key.keyboard.k key.keyboard.l key.keyboard.m key.keyboard.n key.keyboard.o key.keyboard.p key.keyboard.q key.keyboard.r key.keyboard.s key.keyboard.t key.keyboard.u key.keyboard.v key.keyboard.w key.keyboard.x key.keyboard.y key.keyboard.z key.keyboard.f1 key.keyboard.f2 key.keyboard.f3 key.keyboard.f4 key.keyboard.f5 key.keyboard.f6 key.keyboard.f7 key.keyboard.f8 key.keyboard.f9 key.keyboard.f10 key.keyboard.f11 key.keyboard.f12 key.keyboard.f13 key.keyboard.f14 key.keyboard.f15 key.keyboard.f16 key.keyboard.f17 key.keyboard.f18 key.keyboard.f19 key.keyboard.f20 key.keyboard.f21 key.keyboard.f22 key.keyboard.f23 key.keyboard.f24 key.keyboard.f25 key.keyboard.num.lock key.keyboard.keypad.0 key.keyboard.keypad.1 key.keyboard.keypad.2 key.keyboard.keypad.3 key.keyboard.keypad.4 key.keyboard.keypad.5 key.keyboard.keypad.6 key.keyboard.keypad.7 key.keyboard.keypad.8 key.keyboard.keypad.9 key.keyboard.keypad.add key.keyboard.keypad.decimal key.keyboard.keypad.enter key.keyboard.keypad.equal key.keyboard.keypad.multiply key.keyboard.keypad.divide key.keyboard.keypad.subtract key.keyboard.down key.keyboard.left key.keyboard.right key.keyboard.up key.keyboard.apostrophe key.keyboard.backslash key.keyboard.comma key.keyboard.equal key.keyboard.grave.accent key.keyboard.left.bracket key.keyboard.minus key.keyboard.period key.keyboard.right.bracket key.keyboard.semicolon key.keyboard.slash key.keyboard.space key.keyboard.tab key.keyboard.left.alt key.keyboard.left.control key.keyboard.left.shift key.keyboard.left.win key.keyboard.right.alt key.keyboard.right.control key.keyboard.right.shift key.keyboard.right.win key.keyboard.enter key.keyboard.escape key.keyboard.backspace key.keyboard.delete key.keyboard.end key.keyboard.home key.keyboard.insert key.keyboard.page.down key.keyboard.page.up key.keyboard.caps.lock key.keyboard.pause key.keyboard.scroll.lock key.keyboard.menu key.keyboard.print.screen key.keyboard.world.1 key.keyboard.world.2 ","keywords":"","version":null},{"title":"LoopModes","type":0,"sectionRef":"#","url":"/enums/Loop-Modes","content":"LoopModes These are the loop modes a blockbench animation can be set to, they can be initialized in blockbench itself. Or changed in the code via setLoop(string) LOOP: Plays again once it reaches the end of the timeline ONCE: No looping HOLD: Stays on the last keyframe of an animation","keywords":"","version":null},{"title":"PostEffects","type":0,"sectionRef":"#","url":"/enums/PostEffects","content":"PostEffects These are the Super Secret Settings screen effects. They can be applied to the avatar user's POV via renderer:setPostEffect(string) creeper spider notch fxaa art bumpy blobs2 pencil color_convolve deconverge flip invert ntsc outline phosphor scan_pincushion sobel bits desaturate green blur wobble blobs antialias ","keywords":"","version":null},{"title":"RenderModes","type":0,"sectionRef":"#","url":"/enums/RenderModes","content":"RenderModes Render modes indicate what context the avatar is being rendered in. FIGURA_GUI: This is in the Figura pause menu PAPERDOLL: Figura's paperdoll MINECRAFT_GUI: The inventory menu FIRST_PERSON: While in first person (contrary to some beliefs, this includes while holding an item in first person, even if your entire avatar is unloaded at the time) FIRST_PERSON_WORLD: Unknown RENDER: while in third person (other players render the avatar in this mode) WORLD: Unknown OTHER: Other mods like shaders cause this context","keywords":"","version":null},{"title":"PlayerModelParts","type":0,"sectionRef":"#","url":"/enums/PlayerModelParts","content":"PlayerModelParts These are outer layer parts used in conjunction with player:isSkinLayerVisible(string) to detect what parts a player has enabled via the Minecraft Skin Customizations setting. Example usage: log(player:isSkinLayerVisible(&quot;HAT&quot;)) Part Names: CAPE JACKET LEFT_SLEEVE RIGHT_SLEEVE LEFT_PANTS RIGHT_PANTS HAT ","keywords":"","version":null},{"title":"KeyIDs","type":0,"sectionRef":"#","url":"/enums/KeyIDs","content":"KeyIDs For convenience these have been ordered identically to vanilla's keybind menu key.jump key.sneak key.sprint key.left key.right key.back key.forward key.attack key.pickItem key.use key.drop key.hotbar.1 key.hotbar.2 key.hotbar.3 key.hotbar.4 key.hotbar.5 key.hotbar.6 key.hotbar.7 key.hotbar.8 key.hotbar.9 key.inventory key.swapOffhand key.loadToolbarActivator key.saveToolbarActivator key.playerlist key.chat key.command key.socialInteractions key.advancements key.spectatorOutlines key.screenshot key.smoothCamera key.fullscreen key.togglePerspective figura.config.action_wheel_button figura.config.panic_button figura.config.popup_button figura.config.reload_button figura.config.wardrobe_button ","keywords":"","version":null},{"title":"PlayStates","type":0,"sectionRef":"#","url":"/enums/PlayStates","content":"PlayStates The play state of a Blockbench animation, detected with getPlayState(). STOPPED: The animation isn't playing PAUSED: The animation is paused on at a specific time PLAYING: The animation is playing","keywords":"","version":null},{"title":"RenderTypes","type":0,"sectionRef":"#","url":"/enums/RenderTypes","content":"RenderTypes Modelpart render types that can be applied via setPrimaryRenderType(string) or setSecondaryRenderType(string) There can only be one primary and secondary type applied to a cube at once, so you may get unwanted behavior if you make the primary render type 'LINES' as all the pixels aside from the lines will vanish. NONE CUTOUT CUTOUT_CULL TRANSLUCENT TRANSLUCENT_CULL EMISSIVE EMISSIVE_SOLID EYES END_PORTAL END_GATEWAY TEXTURED_PORTAL GLINT GLINT2 TEXTURED_GLINT LINES LINES_STRIP SOLID BLURRY ","keywords":"","version":null},{"title":"UseActions","type":0,"sectionRef":"#","url":"/enums/UseActions","content":"UseActions What hold-right-click action an item you're using has. As this is for holding actions only, there are no use actions for single press actions like placing a block, feeding an animal, or using blocks like buttons, doors, or trapdoors. NONE: Not using any use action EAT: Eating DRINK: Drinking BLOCK: Blocking BOW: Drawing back a bow SPEAR: Preparing to throw a trident CROSSBOW: Loading a crossbow (not while holding a loaded crossbow) SPYGLASS: Peering through a spy glass TOOT_HORN: Tooting a horn BRUSH: Using a brush","keywords":"","version":null},{"title":"ModelPartParentTypes","type":0,"sectionRef":"#","url":"/enums/ModelPartParentTypes","content":"","keywords":"","version":null},{"title":"None​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#none","content":"NONE​ The default ParentType. Using this ParentType as a Keyword has no purpose, as groups with no Keyword will have this ParentType, but it can still be used in scripts. ","version":null,"tagName":"h2"},{"title":"Head​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#head","content":"HEAD​ Mimic Type Mimics the transformation offsets of the Vanilla HEAD If there is no ModelParts with the Skull ParentType, ModelParts with this ParentType will replace the Vanilla Skull. ","version":null,"tagName":"h2"},{"title":"Body​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#body","content":"BODY​ Mimic Type Mimics the transformation offsets of the Vanilla BODY ","version":null,"tagName":"h2"},{"title":"RightArm​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#rightarm","content":"RIGHT_ARM​ Mimic Type Mimics the transformation offsets of the Vanilla RIGHT_ARM This ParentType will appear in First Person under the same conditions as the Vanilla RightArm. ","version":null,"tagName":"h2"},{"title":"LeftArm​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#leftarm","content":"LEFT_ARM​ Mimic Type Mimics the transformation offsets of the Vanilla LEFT_ARM This ParentType will appear in First Person under the same conditions as the Vanilla LeftArm. ","version":null,"tagName":"h2"},{"title":"RightLeg​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#rightleg","content":"RIGHT_LEG​ Mimic Type Mimics the transformation offsets of the Vanilla RIGHT_LEG ","version":null,"tagName":"h2"},{"title":"LeftLeg​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#leftleg","content":"LEFT_LEG​ Mimic Type Mimics the transformation offsets of the Vanilla LEFT_LEG ","version":null,"tagName":"h2"},{"title":"RightElytra​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#rightelytra","content":"RIGHT_ELYTRA​ RightElytron​ RIGHT_ELYTRON​ Mimic Type Mimics the transformation offsets of the Vanilla RIGHT_ELYTRA ModelParts with this ParentType are only visible while an Elytra is equipped.  ","version":null,"tagName":"h2"},{"title":"LeftElytra​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#leftelytra","content":"LEFT_ELYTRA​ LeftElytron​ LEFT_ELYTRON​ Mimic Type Mimics the transformation offsets of the Vanilla LEFT_ELYTRA ModelParts with this ParentType are only visible while an Elytra is equipped.  ","version":null,"tagName":"h2"},{"title":"Cape​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#cape","content":"CAPE​ Mimic Type Mimics the transformation offsets of the Vanilla CAPE This ParentType works even if you don't own a vanilla Cape. ","version":null,"tagName":"h2"},{"title":"World​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#world","content":"WORLD​ Special Type This ParentType will cause the ModelPart to be parented to the Minecraft World itself rather than your Player. Position (0,0,0) will be at the world's origin. 1 block is 16 ModelPart units, so multiply the world coordinates by 16 before setting the position of a World ParentType ModelPart. Rotation (0,0,0) will be facing South instead of what BlockBench defines as North. ModelParts with this ParentType will be visible while in First Person. ","version":null,"tagName":"h2"},{"title":"Hud​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#hud","content":"HUD​ HeadsUpDisplay​ Gui​ GUI​ GraphicalUserInterface​ JraficalUserInterface​ Special Type This ParentType causes the ModelPart to render on the Hud instead of on your player. This only affects the owner's Hud, or players that spectate the owner of the avatar. (0,0,0) is the top left of the screen. 1 ModelPart unit is 1 Minecraft Gui unit. -X moves the ModelPart Right on the screen, and -Y moves the ModelPart Down on the screen. The Z axis determines which ModelParts render on top of others, with -Z moving the ModelPart closer. You can even have ModelParts render on top of the vanilla GUI. ","version":null,"tagName":"h2"},{"title":"Camera​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#camera","content":"CAMERA​ Billboard​ BILLBOARD​ Special Type This ParentType causes the ModelPart to always face the camera. It behaves like the vanilla nameplate or particles. ","version":null,"tagName":"h2"},{"title":"Skull​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#skull","content":"SKULL​ ☠️​ Special Type This ParentType causes the ModelPart to replace the Vanilla Skull. ","version":null,"tagName":"h2"},{"title":"Portrait​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#portrait","content":"PORTRAIT​ Special Type This ParentType will change the player icon in the TAB LIST. Blockbench 0, 0, 0 is the bottom center and the valid area extends 4 units horizontally on each since and 8 units up.  ","version":null,"tagName":"h2"},{"title":"Arrow​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#arrow","content":"ARROW​ Special Type This ParentType replaces the model of arrows fired by you. The pivot point of the ModelPart that has this ParentType does not matter. (0,0,0) in BlockBench is the point on the vanilla arrow's shaft that is just before the arrow head. ","version":null,"tagName":"h2"},{"title":"Item​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#item","content":"ITEM​ Special Type This ParentType designates a Custom Item Model that can be used in the ITEM_RENDER event. ","version":null,"tagName":"h2"},{"title":"RightItemPivot​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#rightitempivot","content":"RIGHT_ITEM_PIVOT​ Pivot Type This ParentType renders the right held item at the ModelPart's pivot point. ","version":null,"tagName":"h2"},{"title":"LeftItemPivot​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#leftitempivot","content":"LEFT_ITEM_PIVOT​ Pivot Type This ParentType renders the left held item at the ModelPart's pivot point. ","version":null,"tagName":"h2"},{"title":"RightSpyglassPivot​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#rightspyglasspivot","content":"RIGHT_SPYGLASS_PIVOT​ Pivot Type This ParentType renders a spyglass at this ModelPart's pivot point when you are using a spyglass in the RightHand. ","version":null,"tagName":"h2"},{"title":"LeftSpyglassPivot​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#leftspyglasspivot","content":"LEFT_SPYGLASS_PIVOT​ Pivot Type This ParentType renders a spyglass at this ModelPart's pivot point when you are using a spyglass in the LeftHand. ","version":null,"tagName":"h2"},{"title":"HelmetItemPivot​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#helmetitempivot","content":"HELMET_ITEM_PIVOT​ Pivot Type This ParentType renders the item that is currently in the Helmet slot. This is for stull like pumpkins, banners, bones. It will not render the Vanilla Helmet in a different location. ","version":null,"tagName":"h2"},{"title":"RightParrotPivot​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#rightparrotpivot","content":"RIGHT_PARROT_PIVOT​ Pivot Type This ParentType renders the entity riding on your right shoulder at the ModelPart's pivot point. I say entity, but that entity will always be a parrot. ","version":null,"tagName":"h2"},{"title":"LeftParrotPivot​","type":1,"pageTitle":"ModelPartParentTypes","url":"/enums/ModelPartParentTypes#leftparrotpivot","content":"LEFT_PARROT_PIVOT​ Pivot Type This ParentType renders the entity riding on your left shoulder at the ModelPart's pivot point. I say entity, but that entity will always be a parrot. ","version":null,"tagName":"h2"},{"title":"TextureTypes","type":0,"sectionRef":"#","url":"/enums/TextureTypes","content":"TextureTypes Texture Types you can set using setPrimaryTexture and setSecondaryTexture SKIN: Your 64x64 Minecraft skin CAPE: Your cape ELYTRA: Your elytra RESOURCE: A texture from Minecraft itself, compatible with resource packs PRIMARY: The modelPart's original texture in Blockbench SECONDARY: The modelPart's original secondary texture in Blockbench (if one exists) SPECULAR: Setting a specular map for rendering mods that use it NORMAL: Setting a normal map for rendering mods that use it CUSTOM: A texture object from Blockbench or one created via the Texture API ","keywords":"","version":null},{"title":"Animations","type":0,"sectionRef":"#","url":"/globals/Animations","content":"","keywords":"","version":null},{"title":"getPlaying​","type":1,"pageTitle":"Animations","url":"/globals/Animations#getplaying","content":"Return a table with all playing animations animations:getPlaying()  ","version":null,"tagName":"h2"},{"title":"stopAll​","type":1,"pageTitle":"Animations","url":"/globals/Animations#stopall","content":"Stops all playing (and paused) animations animations:stopAll()  ","version":null,"tagName":"h2"},{"title":"getAnimations​","type":1,"pageTitle":"Animations","url":"/globals/Animations#getanimations","content":"Returns a table with all animations animations:getAnimations()  ","version":null,"tagName":"h2"},{"title":"Avatar","type":0,"sectionRef":"#","url":"/globals/Avatar","content":"Avatar This page is a WIP!","keywords":"","version":null},{"title":"Config","type":0,"sectionRef":"#","url":"/globals/Config","content":"Config This page is a WIP!","keywords":"","version":null},{"title":"Animation","type":0,"sectionRef":"#","url":"/globals/Animations/Animation","content":"Animation This page is a WIP!","keywords":"","version":null},{"title":"Page","type":0,"sectionRef":"#","url":"/globals/Action-Wheel/Page","content":"Page This page is a WIP!","keywords":"","version":null},{"title":"EntityPoses","type":0,"sectionRef":"#","url":"/enums/EntityPoses","content":"","keywords":"","version":null},{"title":"All Living Entity Poses​","type":1,"pageTitle":"EntityPoses","url":"/enums/EntityPoses#all-living-entity-poses","content":"STANDING : All entities (including players) are STANDING when outside of any of the other poses ","version":null,"tagName":"h2"},{"title":"Player Poses​","type":1,"pageTitle":"EntityPoses","url":"/enums/EntityPoses#player-poses","content":"These are all the poses the player can enter FALL_FLYING : While elytra gliding  SLEEPING : While sleeping  SWIMMING : While in the swimming pose, which includes while crawling  SPIN_ATTACK : While charging from a riptide enchanted trident  CROUCHING : While crouching   ","version":null,"tagName":"h2"},{"title":"Non-Player Poses​","type":1,"pageTitle":"EntityPoses","url":"/enums/EntityPoses#non-player-poses","content":"It's impossible for players to enter these poses, but other living entities can DYING Goat Poses​ LONG_JUMPING Frog Poses​ CROAKING  USING_TONGUE Camel Poses​ SITTING Warden Poses​ ROARING  SNIFFING  EMERGING  DIGGING ","version":null,"tagName":"h2"},{"title":"Action Wheel","type":0,"sectionRef":"#","url":"/globals/Action-Wheel","content":"Action Wheel This page is a WIP!","keywords":"","version":null},{"title":"Event","type":0,"sectionRef":"#","url":"/globals/Events/Event","content":"Event This page is a WIP!","keywords":"","version":null},{"title":"Client","type":0,"sectionRef":"#","url":"/globals/Client","content":"Client This page is a WIP!","keywords":"","version":null},{"title":"Math","type":0,"sectionRef":"#","url":"/globals/Math","content":"","keywords":"","version":null},{"title":"Math Functions​","type":1,"pageTitle":"Math","url":"/globals/Math#math-functions","content":"","version":null,"tagName":"h2"},{"title":"map​","type":1,"pageTitle":"Math","url":"/globals/Math#map","content":"Maps the given value from one range to another For example, if you have a value of 20 in the range 0-200, and you want to map it to the range 100-200, the result will be 110 ","version":null,"tagName":"h3"},{"title":"round​","type":1,"pageTitle":"Math","url":"/globals/Math#round","content":"Rounds the given number to the nearest whole integer ","version":null,"tagName":"h3"},{"title":"sign​","type":1,"pageTitle":"Math","url":"/globals/Math#sign","content":"Returns the sign of the given number Returns 1 if the number is positive, -1 if it's negative, and 0 if it's 0 ","version":null,"tagName":"h3"},{"title":"lerpAngle​","type":1,"pageTitle":"Math","url":"/globals/Math#lerpangle","content":"Similar to the default lerp function, but numbers are limited to the range of 0-360 Lerp is done towards the shortest angle For example, a lerp of 340 and 20, with factor of 0.75, will return 10 ","version":null,"tagName":"h3"},{"title":"shortAngle​","type":1,"pageTitle":"Math","url":"/globals/Math#shortangle","content":"Returns the shortest angle between two angles For example, if you have an angle of 350 degrees and you want to get the shortest angle between it and 0 degrees, the result will be 10 degrees ","version":null,"tagName":"h3"},{"title":"clamp​","type":1,"pageTitle":"Math","url":"/globals/Math#clamp","content":"Clamps the given value between min and max ","version":null,"tagName":"h3"},{"title":"lerp​","type":1,"pageTitle":"Math","url":"/globals/Math#lerp","content":"Linearly interpolates from its first argument to its second argument, with the third argument as the parameter Works on both regular numbers, vectors of the same type and matrices of the same type ","version":null,"tagName":"h3"},{"title":"Numbers​","type":1,"pageTitle":"Math","url":"/globals/Math#numbers","content":"","version":null,"tagName":"h2"},{"title":"playerScale​","type":1,"pageTitle":"Math","url":"/globals/Math#playerscale","content":"The constant of the player scaling related to the world ","version":null,"tagName":"h3"},{"title":"worldScale​","type":1,"pageTitle":"Math","url":"/globals/Math#worldscale","content":"The constant of the world scaling related with the player ","version":null,"tagName":"h3"},{"title":"Keybinds","type":0,"sectionRef":"#","url":"/globals/Keybinds","content":"Keybinds This page is a WIP!","keywords":"","version":null},{"title":"Keybind","type":0,"sectionRef":"#","url":"/globals/Keybinds/Keybind","content":"Keybind This page is a WIP!","keywords":"","version":null},{"title":"Events","type":0,"sectionRef":"#","url":"/globals/Events","content":"","keywords":"","version":null},{"title":"Init​","type":1,"pageTitle":"Events","url":"/globals/Events#init","content":"If code is run outside of any event or function that is the init phase, and it runs first before any other event. Calling the player API will error here, use entity_init instead. ","version":null,"tagName":"h3"},{"title":"Entity Init​","type":1,"pageTitle":"Events","url":"/globals/Events#entity-init","content":"The entity_init event runs when the avatar's entity (usually the player) first starts existing. It runs once and has no arguments. Calling the player API is safe here, making it a player-oriented init method. function events.entity_init() log(&quot;The player api has loaded!&quot;) end  ","version":null,"tagName":"h3"},{"title":"Tick​","type":1,"pageTitle":"Events","url":"/globals/Events#tick","content":"The tick event runs every in-game tick if the avatar's entity (the player) exists. There are 20 ticks in a second. This is the most commonly used event. Tick has no arguments and calling the player API is safe here. function events.tick() log(&quot;A tick has passed&quot;) end  ","version":null,"tagName":"h3"},{"title":"World Tick​","type":1,"pageTitle":"Events","url":"/globals/Events#world-tick","content":"The world_tick event runs every in game tick. There are 20 ticks in a second. World_tick has no arguments and calling the player API without a player:isLoaded() check will error here. function events.world_tick() log(&quot;A tick has passed&quot;) end  ","version":null,"tagName":"h3"},{"title":"Render​","type":1,"pageTitle":"Events","url":"/globals/Events#render","content":"The render event runs once a frame before the avatar is rendered, after the avatar's entity exists. Calling the player is safe here. Render has three parameters, all parameters are optional. The first is delta, which is a number from 0 to 1 indicating the time between ticks (so at the start of a tick it always resets to 0). Delta is most often used to smooth values Minecraft updates once a tick. The second parameter is the context of the current render mode. IE: If you're in first person you're viewing the FIRST_PERSON context, but if you have the paperdoll on you also have the PAPERDOLL context. The third is the source matrix used to render the avatar. Because of a Minecraft bug this matrix will be NaN when moving very fast like when elytra flying. function events.render(delta, context, matrix) log(&quot;The render context is... &quot; .. context) end  ","version":null,"tagName":"h3"},{"title":"Post Render​","type":1,"pageTitle":"Events","url":"/globals/Events#post-render","content":"The render event runs once a frame after the avatar is rendered, after the avatar's entity exists. Calling the player is safe here. It has the same parameters as render function events.post_render(delta, context, matrix) log(&quot;The render context is... &quot; .. context) end  ","version":null,"tagName":"h3"},{"title":"World Render​","type":1,"pageTitle":"Events","url":"/globals/Events#world-render","content":"The world_render event is run every frame before the world is rendered. Calling the player without a player:isLoaded() check will error here. Its only parameter is delta function events.world_render(delta) log(&quot;A frame has passed!&quot;) end  ","version":null,"tagName":"h3"},{"title":"Post World Render​","type":1,"pageTitle":"Events","url":"/globals/Events#post-world-render","content":"The world_render event is run every frame after the world is rendered. Calling the player without a player:isLoaded() check will error here. Its only parameter is delta function events.post_world_render(delta) log(&quot;A frame has passed!&quot;) end  ","version":null,"tagName":"h3"},{"title":"Chat Send Message​","type":1,"pageTitle":"Events","url":"/globals/Events#chat-send-message","content":"The CHAT_SEND_MESSAGE event is run every time you send a message in chat A string parameter is passed in, which contains the message that was sent The return value is chained to the next events of the same type, whereas NIL cancels the message from being sent and any other value will modify the sent message (if allowed in the settings) Calling the player without a player:isLoaded() check will error here. function events.chat_send_message(msg) host:setActionbar(msg) return true -- allows the message to be sent end  ","version":null,"tagName":"h3"},{"title":"Chat Receive Message​","type":1,"pageTitle":"Events","url":"/globals/Events#chat-receive-message","content":"The CHAT_RECEIVE_MESSAGE event is run every time a message is received in chat The first argument is the raw string of the received text The second argument is a JSON string representation of the received text If the first return value is not nil, the message will be replaced with that value If the first return value is false, it will suppress adding this message The second return value is, optionally, a RGB vector which will be used as background color for this message Calling the player without a player:isLoaded() check will error here. function events.chat_receive_message(raw, text) host:setActionbar(raw) -- logs are useful for visualizing when an event is running but doing it here is a bad idea end  ","version":null,"tagName":"h3"},{"title":"Skull Render​","type":1,"pageTitle":"Events","url":"/globals/Events#skull-render","content":"Called on every one of your skull blocks placed in the world Calling the player without a player:isLoaded() check will error here. It have 5 arguments, as listed below: (number) - the tick delta (blockstate) - the block, when rendered from a block (itemstack) - the item, when rendered from an item (entity) - the entity, when rendered from a entity (string) - the type of the rendering (LEFT_HAND, HEAD, BLOCK, ...) If the return value is true, the skull will not render function events.skull_render(delta, block, item, entity, mode) log(&quot;The rendering mode of this skull is... &quot; .. mode) end  ","version":null,"tagName":"h3"},{"title":"Mouse Scroll​","type":1,"pageTitle":"Events","url":"/globals/Events#mouse-scroll","content":"The MOUSE_SCROLL event runs every time the mouse is scrolled Takes a parameter delta, which is the direction of the scroll If returned true, the event cancels its vanilla function Calling the player without a player:isLoaded() check will error here. function events.mouse_scroll(delta) log(delta) end  ","version":null,"tagName":"h3"},{"title":"Mouse Move​","type":1,"pageTitle":"Events","url":"/globals/Events#mouse-move","content":"The MOUSE_MOVE event runs every time the mouse is moved around Takes two parameters, x and y, which is the difference from the mouse position based on the latest saved position If returned true, the event cancels its vanilla function Note that cancelling the vanilla function also cancels saving the last mouse position Calling the player without a player:isLoaded() check will error here. function events.mouse_move(x, y) log(x, y) end  ","version":null,"tagName":"h3"},{"title":"Mouse Press​","type":1,"pageTitle":"Events","url":"/globals/Events#mouse-press","content":"The MOUSE_PRESS event runs every time a mouse button is pressed Takes three number parameters, a &quot;button&quot;, which is the number id of the button that was been pressed, the &quot;action&quot;, which is the status of the press event (0 for release, 1 for press, 2 for hold), and the &quot;modifier&quot;, which is a bitmask number detecting if you have any modifier keys being pressed (like shift or alt, for example) If returned true, the event cancels its vanilla function Calling the player without a player:isLoaded() check will error here. The hold action is non-functional in mouse_press. Check the keybind API for an alternative to mouse_press. function events.mouse_press(button, action, modifier) log(button) end  ","version":null,"tagName":"h3"},{"title":"Key Press​","type":1,"pageTitle":"Events","url":"/globals/Events#key-press","content":"The key_press event runs every time a keyboard key is pressed Takes three number parameters, a &quot;key&quot;, which is the number id of the key that was been pressed, the &quot;action&quot;, which is the status of the press event (0 for release, 1 for press, 2 for hold), and the &quot;modifier&quot;, which is a bitmask number detecting if you have any modifier keys being pressed (like shift or alt, for example) If returned true, the event cancels its vanilla function Calling the player without a player:isLoaded() check will error here. Check the keybind API for an alternative to key_press. function events.key_press(key, action, modifier) log(key) end  ","version":null,"tagName":"h3"},{"title":"Char Typed​","type":1,"pageTitle":"Events","url":"/globals/Events#char-typed","content":"The char_typed event runs every time a character is inputted Takes three parameters, the resulting &quot;string&quot; after converting the code point, the &quot;modifier&quot;, which is a bitmask number detecting if you have any modifier keys being pressed (like shift or alt, for example), and the &quot;codepoint&quot; of the inputted char Calling the player without a player:isLoaded() check will error here. function events.char_typed(character, modifier, codepoint) log(character .. &quot; was typed!&quot;) end  ","version":null,"tagName":"h3"},{"title":"Use Item​","type":1,"pageTitle":"Events","url":"/globals/Events#use-item","content":"The use_item event is run every time the entity uses an item The item, action and amount of particles this item would produce is given as argument If returned true, the event cancels its vanilla function Calling the player without a player:isLoaded() check will error here. Note: This event is several ticks slower than its alternative function in the player API: player:isUsingItem() function events.use_item(item, action, particles) log(item) end  ","version":null,"tagName":"h3"},{"title":"Arrow Render​","type":1,"pageTitle":"Events","url":"/globals/Events#arrow-render","content":"The ARROW_RENDER event is run for every arrow entity shot by the Avatar owner It takes two arguments, the tick delta, and the arrow entity- which contains all of the arrow's information like its position, or its type. Returning &quot;true&quot; stops this arrow from rendering, including the Arrow parent parts Calling the player without a player:isLoaded() check will error here. function events.arrow_render(delta, arrow) log(arrow) end  ","version":null,"tagName":"h3"},{"title":"Item Render​","type":1,"pageTitle":"Events","url":"/globals/Events#item-render","content":"Called on every one of your items that is being rendered It takes six arguments, the item, the rendering mode, the position, rotation and scale that it would be applied, and if its being rendered from the left hand Returning a ModelPart parented to Item, stops the rendering of this item and will render the returned part instead. Calling the player without a player:isLoaded() check will error here. See the custom items page for a more in-depth explanation. function events.item_render(item, mode, pos, rot, scale, left) log(item) end  ","version":null,"tagName":"h3"},{"title":"On Play Sound​","type":1,"pageTitle":"Events","url":"/globals/Events#on-play-sound","content":"The on_play_sound event runs every time you hear a sound. Take as arguments, the sound ID, its world position, volume, pitch, if the sound should loop, the sound category, and the sound file path. The file path will always be nil when hearing sounds played by Figura avatars. Calling the player without a player:isLoaded() check will error here. function events.on_play_sound(id, pos, vol, pitch, loop, category, path) log(id) end  ","version":null,"tagName":"h3"},{"title":"Resource Reload​","type":1,"pageTitle":"Events","url":"/globals/Events#resource-reload","content":"Called every time that the client resources are reloaded, allowing you to re-create or update resource texture references. Calling the player without a player:isLoaded() check will error here. function events.resource_reload() log(&quot;Resources reloaded&quot;) end  ","version":null,"tagName":"h3"},{"title":"Safely Calling Player​","type":1,"pageTitle":"Events","url":"/globals/Events#safely-calling-player","content":"The easiest way to blanket-protect an entire event (or any function like a ping) against the entity init error caused by calling the player API when it doesn't exist is to exit the function at the beginning of the event with this: if not player:isLoaded() then return end function events.item_render() if not player:isLoaded() then return end log(&quot;An item is being held (and the player API has loaded)&quot;) end  Otherwise you can use an if statement if you want to protect only a portion of the code. ","version":null,"tagName":"h3"},{"title":"Matrices","type":0,"sectionRef":"#","url":"/globals/Matrices","content":"Matrices This page is a WIP!","keywords":"","version":null},{"title":"Matrix3","type":0,"sectionRef":"#","url":"/globals/Matrices/Matrix3","content":"Matrix3 This page is a WIP!","keywords":"","version":null},{"title":"Action","type":0,"sectionRef":"#","url":"/globals/Action-Wheel/Action","content":"","keywords":"","version":null},{"title":"Action Events​","type":1,"pageTitle":"Action","url":"/globals/Action-Wheel/Action#action-events","content":"Technically they are &quot;callbacks&quot; and not &quot;events&quot; as you can only assign a single function, but eh. It's common practice to pass pings to these functions since interacting with the action_wheel is not sync'd between clients. Checkout the setOnToggle function to see an example. ","version":null,"tagName":"h2"},{"title":"setOnLeftClick()​","type":1,"pageTitle":"Action","url":"/globals/Action-Wheel/Action#setOnLeftClick","content":"Sets the function that is executed when the left mouse button is clicked The function have one argument The first argument is this action itself Example: myPage:newAction() :setOnLeftClick(function() print('I left clicked this button!') end)   ","version":null,"tagName":"h3"},{"title":"setOnRightClick(fn)​","type":1,"pageTitle":"Action","url":"/globals/Action-Wheel/Action#setOnRightClick","content":"Sets the function that is executed when the right mouse button is clicked The function have one argument The first argument is this action itself Example: myPage:newAction() :setOnRightClick(function() print('I right clicked this button!') end)   ","version":null,"tagName":"h3"},{"title":"setOnToggle(fn)​","type":1,"pageTitle":"Action","url":"/globals/Action-Wheel/Action#setOnToggle","content":"When the Action is assigned a function to the toggle field, it becomes a Toggle Action. Figura passes the Toggle Action's internal state variable as the first parameter, and the Action itself as the second. Example: function pings.setVisible(state) models:setVisible(state) end myPage:newAction() :title(&quot;disabled&quot;) :toggleTitle(&quot;enabled&quot;) :item(&quot;red_wool&quot;) :toggleItem(&quot;green_wool&quot;) :setOnToggle(pings.setVisible)   ","version":null,"tagName":"h3"},{"title":"setOnUntoggle(fn)​","type":1,"pageTitle":"Action","url":"/globals/Action-Wheel/Action#setOnUntoggle","content":"Unlike Toggle which gets executed when the Action is toggled on or off, UnToggle only gets executed when the Action is toggled off. Figura passes the Toggle Action's internal state variable as the first parameter (which is always false due to the nature of UnToggle), and the Action itself as the second. info setOnUntoggle is redundant because setOnToggle will also work when the action is untoggled if there is no OnUntoggle function set. Example: myPage:newAction() :setOnToggle(function(bool) print('This is always true: ', .. bool) end) :setOnUntoggle(function(bool) print('This is always false: ' .. bool) end)   ","version":null,"tagName":"h3"},{"title":"setOnScroll(fn)​","type":1,"pageTitle":"Action","url":"/globals/Action-Wheel/Action#setOnScroll","content":"This will execute when the mouse wheel scrolls while hovering over the Action. The first parameter is the direction the mouse scrolled (1 for scroll up, -1 for scroll down. Can be more than 1 for non-standard mouse wheels). The second paremeter is the Action itself Example: myPage:newAction() :setOnScroll(function(dir) print(&quot;Scrolled in this direction: &quot; .. dir) end)  ","version":null,"tagName":"h3"},{"title":"Matrix2","type":0,"sectionRef":"#","url":"/globals/Matrices/Matrix2","content":"Matrix2 This page is a WIP!","keywords":"","version":null},{"title":"Matrix4","type":0,"sectionRef":"#","url":"/globals/Matrices/Matrix4","content":"Matrix4 This page is a WIP!","keywords":"","version":null},{"title":"figuraMetatables","type":0,"sectionRef":"#","url":"/globals/misc/figuraMetatables","content":"figuraMetatables A table containing all the metatables for Figura's object types The metatables are editable","keywords":"","version":null},{"title":"Host","type":0,"sectionRef":"#","url":"/globals/Host","content":"","keywords":"","version":null},{"title":"isHost​","type":1,"pageTitle":"Host","url":"/globals/Host#ishost","content":"Returns true if this instance of the script is running on host ","version":null,"tagName":"h3"},{"title":"Player Data​","type":1,"pageTitle":"Host","url":"/globals/Host#player-data","content":"","version":null,"tagName":"h2"},{"title":"isJumping​","type":1,"pageTitle":"Host","url":"/globals/Host#isjumping","content":"Checks if the jump key is being pressed. ","version":null,"tagName":"h3"},{"title":"isFlying​","type":1,"pageTitle":"Host","url":"/globals/Host#isflying","content":"Checks if the player is currently creative flying ","version":null,"tagName":"h3"},{"title":"isContainerOpen​","type":1,"pageTitle":"Host","url":"/globals/Host#iscontaineropen","content":"Checks if the host has a container screen opened ","version":null,"tagName":"h3"},{"title":"getAir​","type":1,"pageTitle":"Host","url":"/globals/Host#getair","content":"Gets the remaining amount of air of the player. From 300 to -19, whenever you take damage from drowning it sets back to 0. Water breathing freezes the value when underwater. Respiration slows down how quickly the number goes down. ","version":null,"tagName":"h3"},{"title":"getSlot(integer or string)​","type":1,"pageTitle":"Host","url":"/globals/Host#getslotinteger-or-string","content":"Gets an ItemStack for the item in the given slot The slot is either their numerical id (0 indexed) or the slot string, as used in the /item command For the numerical id, 0-8 are the hotbar, 9-35 are the rest of the inventory starting from the top left slot, 99 is the offhand, and 100-103 are the armor slots from the boots to the helmet. player:getItem() is a better alternative for getting equipment slots. ","version":null,"tagName":"h3"},{"title":"setSlot(slot,item)​","type":1,"pageTitle":"Host","url":"/globals/Host#setslotslotitem","content":"Sets a slot with an ItemStack The slot is either their numerical id (0 indexed) or the slot string, as used in the /item command Slot -1 uses the first available slot Only runs for creative mode ","version":null,"tagName":"h3"},{"title":"getScreenSlot(slot)​","type":1,"pageTitle":"Host","url":"/globals/Host#getscreenslotslot","content":"Gets the item in a screen slot The slot is either their numerical id (0 indexed) or the slot string, as used in the /item command If the player is not currently in a screen, the screen has no slots, or the slot index is greater than the maximum, returns nil ","version":null,"tagName":"h3"},{"title":"getScreenSlotCount​","type":1,"pageTitle":"Host","url":"/globals/Host#getscreenslotcount","content":"Gets the number of slots in the screen the player is currently in If the player is not currently in a screen or the screen has no slots, returns nil ","version":null,"tagName":"h3"},{"title":"getScreen​","type":1,"pageTitle":"Host","url":"/globals/Host#getscreen","content":"Gets the class name of the screen the player is currently on. Class names are slightly obfuscated by Minecraft's code and will return a string ending in numbers that are the class' id. A list of class ids can b found in GS' VSCode docs, or you can use a log to get the name of the screen you're accessing. If the player is not currently in a screen, returns nil ","version":null,"tagName":"h3"},{"title":"getStatusEffects​","type":1,"pageTitle":"Host","url":"/globals/Host#getstatuseffects","content":"Returns a table of all of the player's status effects The table contains sub-tables, each of which contains the name, amplifier, duration, and particle visibility of each status effect. To access a sub table index the effect table with the sub-table's name. Re the example below: effect.name for _, effect in pairs(host:getStatusEffects()) do logTable(effect) end  ","version":null,"tagName":"h3"},{"title":"getAttackCharge​","type":1,"pageTitle":"Host","url":"/globals/Host#getattackcharge","content":"Returns a fraction (0 to 1) of the charge of the player attack If less than 1, every attack will result result in a weak attack ","version":null,"tagName":"h3"},{"title":"getReachDistance​","type":1,"pageTitle":"Host","url":"/globals/Host#getreachdistance","content":"Returns the current reach distance of the player ","version":null,"tagName":"h3"},{"title":"getPickBlock​","type":1,"pageTitle":"Host","url":"/globals/Host#getpickblock","content":"Returns the current targeted block set by the client Returns a vararg of the block, the hit position and the block face the hit collided ","version":null,"tagName":"h3"},{"title":"getPickEntity​","type":1,"pageTitle":"Host","url":"/globals/Host#getpickentity","content":"Returns the current targeted entity set by the client ","version":null,"tagName":"h3"},{"title":"Chat​","type":1,"pageTitle":"Host","url":"/globals/Host#chat","content":"","version":null,"tagName":"h2"},{"title":"isChatOpen​","type":1,"pageTitle":"Host","url":"/globals/Host#ischatopen","content":"Checks if the host has the chat screen opened ","version":null,"tagName":"h3"},{"title":"sendChatCommand(string)​","type":1,"pageTitle":"Host","url":"/globals/Host#sendchatcommandstring","content":"Sends the given command in the chat ","version":null,"tagName":"h3"},{"title":"setChatMessage(integer,string,vec3)​","type":1,"pageTitle":"Host","url":"/globals/Host#setchatmessageintegerstringvec3","content":"Modifies a chat message with the given text Takes an index, were 1 means the last message on chat Setting the message to nil will effectively remove it from the chat ","version":null,"tagName":"h3"},{"title":"sendChatMessage​","type":1,"pageTitle":"Host","url":"/globals/Host#sendchatmessage","content":"Sends the given message in the chat ","version":null,"tagName":"h3"},{"title":"getChatMessage(integer)​","type":1,"pageTitle":"Host","url":"/globals/Host#getchatmessageinteger","content":"Returns a table with information about a chat message Takes an index, were 1 means the last message on chat ","version":null,"tagName":"h3"},{"title":"appendChatHistory(string)​","type":1,"pageTitle":"Host","url":"/globals/Host#appendchathistorystring","content":"Appends the message on the recent chat history ","version":null,"tagName":"h3"},{"title":"setChatText​","type":1,"pageTitle":"Host","url":"/globals/Host#setchattext","content":"Sets the text currently being typed in the chat window to the given string ","version":null,"tagName":"h3"},{"title":"getChatText​","type":1,"pageTitle":"Host","url":"/globals/Host#getchattext","content":"Gets the text that is currently being typed into the chat window ","version":null,"tagName":"h3"},{"title":"setChatColor(vec3)​","type":1,"pageTitle":"Host","url":"/globals/Host#setchatcolorvec3","content":"Sets the color of the text that is currently being typed into the chat window ","version":null,"tagName":"h3"},{"title":"getChatColor​","type":1,"pageTitle":"Host","url":"/globals/Host#getchatcolor","content":"Gets the chat window text color ","version":null,"tagName":"h3"},{"title":"isChatVerified​","type":1,"pageTitle":"Host","url":"/globals/Host#ischatverified","content":"Presumably gets if the messages being sent are verified by the Minecraft server (speculation) ","version":null,"tagName":"h3"},{"title":"Other​","type":1,"pageTitle":"Host","url":"/globals/Host#other","content":"","version":null,"tagName":"h2"},{"title":"swingArm(bool)​","type":1,"pageTitle":"Host","url":"/globals/Host#swingarmbool","content":"Animates swinging the player's arm If the boolean is true, then the offhand is the one that swings ","version":null,"tagName":"h3"},{"title":"setTitle(string)​","type":1,"pageTitle":"Host","url":"/globals/Host#settitlestring","content":"Sets the current title to the given text The text is given as json ","version":null,"tagName":"h3"},{"title":"setSubtitle(string)​","type":1,"pageTitle":"Host","url":"/globals/Host#setsubtitlestring","content":"Sets the current subtitle to the given text The text is given as json ","version":null,"tagName":"h3"},{"title":"setActionbar(string,bool)​","type":1,"pageTitle":"Host","url":"/globals/Host#setactionbarstringbool","content":"Sets the action bar message to the given text The boolean parameter defaults to false and sets if the text will be animated ","version":null,"tagName":"h3"},{"title":"setTitleTimes(vec3)​","type":1,"pageTitle":"Host","url":"/globals/Host#settitletimesvec3","content":"Sets the duration of the title on the screen, also its fade-in and fade-out durations. The inputs for the vec3 are order like-so: (fadeInTime, stayTime, fadeOutTime) ","version":null,"tagName":"h3"},{"title":"clearTitle​","type":1,"pageTitle":"Host","url":"/globals/Host#cleartitle","content":"Clears the current title from the GUI ","version":null,"tagName":"h3"},{"title":"setUnlockCursor(bool)​","type":1,"pageTitle":"Host","url":"/globals/Host#setunlockcursorbool","content":"Toggles locking of your cursor, letting you move it freely on the screen instead of it controlling your player's rotation ","version":null,"tagName":"h3"},{"title":"isCursorUnlocked​","type":1,"pageTitle":"Host","url":"/globals/Host#iscursorunlocked","content":"Checks if the cursor is currently unlocked Only responds to your own changes in script, not anything done by Minecraft ","version":null,"tagName":"h3"},{"title":"screenshot​","type":1,"pageTitle":"Host","url":"/globals/Host#screenshot","content":"Takes a screenshot from the current screen and returns a Texture of it ","version":null,"tagName":"h3"},{"title":"setClipboard​","type":1,"pageTitle":"Host","url":"/globals/Host#setclipboard","content":"Sets the clipboard text ","version":null,"tagName":"h3"},{"title":"getClipboard​","type":1,"pageTitle":"Host","url":"/globals/Host#getclipboard","content":"Gets the text from the clipboard ","version":null,"tagName":"h3"},{"title":"isAvatarUploaded​","type":1,"pageTitle":"Host","url":"/globals/Host#isavataruploaded","content":"Checks if this avatar is currently uploaded ","version":null,"tagName":"h3"},{"title":"listFiles","type":0,"sectionRef":"#","url":"/globals/misc/listFiles","content":"listFiles A function that returns a table with all script file names from the specified path If no path is specified, it will fetch from the root folder A second argument, boolean, can be given to also list files inside subfolders listFiles() ","keywords":"","version":null},{"title":"log","type":0,"sectionRef":"#","url":"/globals/misc/log","content":"log A function that writes its arguments to chat Even though the syntax says only one argument, you can put as many as you want All of them will print, and they'll be separated by a tab space Returns the string representation of all values log() ","keywords":"","version":null},{"title":"logJson","type":0,"sectionRef":"#","url":"/globals/misc/logJson","content":"logJson Takes a Minecraft json string as an argument, and prints it to the chat formatted, without the lua print header Even though the syntax says only one argument, you can put as many as you want All of them will print, and they'll be appended in the end of the previous argument Returns the formatted string logJson() ","keywords":"","version":null},{"title":"logTable","type":0,"sectionRef":"#","url":"/globals/misc/logTable","content":"logTable The first argument is either a Table, or it's a Userdata, which refers to any of the added Figura types Prints the table out to chat, specially formatted If userdata is passed in, it is automatically converted to a table or string, and displayed In the case of tables inside of tables, the &quot;maxDepth&quot; parameter will be used to determine how far to go Default value for maxDepth is 1 Third argument, &quot;silent&quot;, will skip the chat print and will only return the string logTable() ","keywords":"","version":null},{"title":"parseJson","type":0,"sectionRef":"#","url":"/globals/misc/parseJson","content":"parseJson Takes a json string as an argument, and converts it into a lua value. Objects and arrays are converted to tables appropriately. parseJson() ","keywords":"","version":null},{"title":"print","type":0,"sectionRef":"#","url":"/globals/misc/print","content":"print A function that writes its arguments to chat Even though the syntax says only one argument, you can put as many as you want All of them will print, and they'll be separated by a tab space Returns the string representation of all values print() ","keywords":"","version":null},{"title":"ItemTask","type":0,"sectionRef":"#","url":"/globals/Models/ItemTask","content":"ItemTask This page is a WIP!","keywords":"","version":null},{"title":"type","type":0,"sectionRef":"#","url":"/globals/misc/type","content":"type Figura overrides lua's type() function When used on Figura types, returns the type's name as seen in the docs and in the figuraMetatables global When called on a table that has a metatable with a __type key, returns the corresponding value","keywords":"","version":null},{"title":"printJson","type":0,"sectionRef":"#","url":"/globals/misc/printJson","content":"printJson Takes a Minecraft json string as an argument, and prints it to the chat formatted, without the lua print header Even though the syntax says only one argument, you can put as many as you want All of them will print, and they'll be appended in the end of the previous argument Returns the formatted string printJson() ","keywords":"","version":null},{"title":"printTable","type":0,"sectionRef":"#","url":"/globals/misc/printTable","content":"printTable The first argument is either a Table, or it's a Userdata, which refers to any of the added Figura types Prints the table out to chat, specially formatted If userdata is passed in, it is automatically converted to a table or string, and displayed In the case of tables inside of tables, the &quot;maxDepth&quot; parameter will be used to determine how far to go Default value for maxDepth is 1 Third argument, &quot;silent&quot;, will skip the chat print and will only return the string printTable() ","keywords":"","version":null},{"title":"require","type":0,"sectionRef":"#","url":"/globals/misc/require","content":"","keywords":"","version":null},{"title":"Models","type":0,"sectionRef":"#","url":"/globals/Models","content":"Models This page is a WIP!","keywords":"","version":null},{"title":"Examples​","type":1,"pageTitle":"require","url":"/globals/misc/require#examples","content":"Script in root folder​ MyCoolAvatar ├─ script └─ JimmyAnims -- script.lua require(&quot;JimmyAnims&quot;)  Script in another folder​ MyCoolAvatar ├─ script └─ MyFolder └─ GSAnimBlend -- script.lua require(&quot;MyFolder.GSAnimBlend&quot;)  ","version":null,"tagName":"h3"},{"title":"toJson","type":0,"sectionRef":"#","url":"/globals/misc/toJson","content":"toJson Takes any lua value, and converts it into a json string. Does not accept functions, they will be treated as null. toJson() ","keywords":"","version":null},{"title":"BlockTask","type":0,"sectionRef":"#","url":"/globals/Models/BlockTask","content":"BlockTask This page is a WIP!","keywords":"","version":null},{"title":"Vertex","type":0,"sectionRef":"#","url":"/globals/Models/Vertex","content":"Vertex This page is a WIP!","keywords":"","version":null},{"title":"RenderTask","type":0,"sectionRef":"#","url":"/globals/Models/RenderTask","content":"RenderTask This page is a WIP!","keywords":"","version":null},{"title":"Particles","type":0,"sectionRef":"#","url":"/globals/Particles","content":"Particles This page is a WIP!","keywords":"","version":null},{"title":"TextTask","type":0,"sectionRef":"#","url":"/globals/Models/TextTask","content":"TextTask This page is a WIP!","keywords":"","version":null},{"title":"Pings","type":0,"sectionRef":"#","url":"/globals/Pings","content":"Pings Go here for information on Pings","keywords":"","version":null},{"title":"NameplateCustomization","type":0,"sectionRef":"#","url":"/globals/Nameplate/NameplateCustomization","content":"NameplateCustomization This page is a WIP!","keywords":"","version":null},{"title":"SpriteTask","type":0,"sectionRef":"#","url":"/globals/Models/SpriteTask","content":"SpriteTask This page is a WIP!","keywords":"","version":null},{"title":"EntityNameplateCustomization","type":0,"sectionRef":"#","url":"/globals/Nameplate/EntityNameplateCustomization","content":"EntityNameplateCustomization This page is a WIP!","keywords":"","version":null},{"title":"NameplateCustomizationGroup","type":0,"sectionRef":"#","url":"/globals/Nameplate/NameplateCustomizationGroup","content":"NameplateCustomizationGroup This page is a WIP!","keywords":"","version":null},{"title":"Entity","type":0,"sectionRef":"#","url":"/globals/Player/Entity","content":"Entity This page is a WIP!","keywords":"","version":null},{"title":"User","type":0,"sectionRef":"#","url":"/globals/Player/User","content":"User This page is a WIP!","keywords":"","version":null},{"title":"Sound","type":0,"sectionRef":"#","url":"/globals/Sounds/Sound","content":"","keywords":"","version":null},{"title":"stop​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#stop","content":"Stops the sound ","version":null,"tagName":"h3"},{"title":"play​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#play","content":"Plays the sound ","version":null,"tagName":"h3"},{"title":"pause​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#pause","content":"Pauses the sound ","version":null,"tagName":"h3"},{"title":"setPos(vec3)​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#setposvec3","content":"Sets the position of the sound ","version":null,"tagName":"h3"},{"title":"getPos​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#getpos","content":"Gets the position of the sound as set by setPos ","version":null,"tagName":"h3"},{"title":"isPlaying​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#isplaying","content":"Gets if the sound is playing, but this is an unreliable function. A workaround is to stop the sound before you play it (even if it isn't playing) so you can reset the playing state. ","version":null,"tagName":"h3"},{"title":"setVolume(number)​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#setvolumenumber","content":"Sets the volume of the sound ","version":null,"tagName":"h3"},{"title":"getVolume​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#getvolume","content":"Gets the volume of the sound ","version":null,"tagName":"h3"},{"title":"setPitch(number)​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#setpitchnumber","content":"Sets the pitch of the sound ","version":null,"tagName":"h3"},{"title":"getPitch​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#getpitch","content":"Gets the pitch of the sound ","version":null,"tagName":"h3"},{"title":"setLoop(bool)​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#setloopbool","content":"Sets if the sound will loop or not ","version":null,"tagName":"h3"},{"title":"isLooping​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#islooping","content":"Gets if the sound is set to loop or not ","version":null,"tagName":"h3"},{"title":"setAttenuation(number)​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#setattenuationnumber","content":"Sets the attenuation of the sound ","version":null,"tagName":"h3"},{"title":"getAttenuation​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#getattenuation","content":"Gets the attenuation of the sound ","version":null,"tagName":"h3"},{"title":"setSubtitle(string)​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#setsubtitlestring","content":"Sets the subtitle (the name that Minecraft's subtitle function will call the sound) ","version":null,"tagName":"h3"},{"title":"getSubtitle​","type":1,"pageTitle":"Sound","url":"/globals/Sounds/Sound#getsubtitle","content":"Gets the subtitle ","version":null,"tagName":"h3"},{"title":"Sounds","type":0,"sectionRef":"#","url":"/globals/Sounds","content":"Sounds This page is a WIP!","keywords":"","version":null},{"title":"Viewer","type":0,"sectionRef":"#","url":"/globals/Player/Viewer","content":"Viewer This page is a WIP!","keywords":"","version":null},{"title":"Particle","type":0,"sectionRef":"#","url":"/globals/Particles/Particle","content":"","keywords":"","version":null},{"title":"spawn​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#spawn","content":"Spawns the particle with its current properties (set with the other functions) ","version":null,"tagName":"h3"},{"title":"isAlive​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#isalive","content":"Gets if the particle is still in the world ","version":null,"tagName":"h3"},{"title":"setPos(vec3)​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#setposvec3","content":"Sets the position of the particle ","version":null,"tagName":"h3"},{"title":"getPos​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#getpos","content":"Gets the position of the particle ","version":null,"tagName":"h3"},{"title":"setColor(vec3 or vec4)​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#setcolorvec3-or-vec4","content":"Sets the particle color, most particles don't support it. The alpha value can be excluded ","version":null,"tagName":"h3"},{"title":"getColor​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#getcolor","content":"Gets the color as set by setcolor ","version":null,"tagName":"h3"},{"title":"setScale(vec3)​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#setscalevec3","content":"Sets the scale of the particle ","version":null,"tagName":"h3"},{"title":"getScale​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#getscale","content":"Gets the scale of the particle ","version":null,"tagName":"h3"},{"title":"setVelocity(vec3)​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#setvelocityvec3","content":"Sets the velocity of the particle ","version":null,"tagName":"h3"},{"title":"getVelocity​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#getvelocity","content":"Gets the velocity of the particle ","version":null,"tagName":"h3"},{"title":"setLifetime(integer)​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#setlifetimeinteger","content":"Sets how long the particle should stay in the world. Particles with animations will animate in relation to their life left, so longer lives will make the animation play slower. ","version":null,"tagName":"h3"},{"title":"getLifetime​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#getlifetime","content":"Gets the lifetime ","version":null,"tagName":"h3"},{"title":"setGravity(number)​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#setgravitynumber","content":"Sets the strength of gravity ","version":null,"tagName":"h3"},{"title":"getGravity​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#getgravity","content":"Gets the gravity value ","version":null,"tagName":"h3"},{"title":"setPower​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#setpower","content":"I honestly don't know what this does at time of writing ","version":null,"tagName":"h3"},{"title":"getPower​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#getpower","content":"Gets the power ","version":null,"tagName":"h3"},{"title":"setPhysics(bool)​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#setphysicsbool","content":"Sets if the particle will experience physics ","version":null,"tagName":"h3"},{"title":"hasPhysics​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#hasphysics","content":"Gets if the particle has physics ","version":null,"tagName":"h3"},{"title":"setSize(number)​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#setsizenumber","content":"Sets the scale of the particle, identical to setScale ","version":null,"tagName":"h3"},{"title":"getSize​","type":1,"pageTitle":"Particle","url":"/globals/Particles/Particle#getsize","content":"Gets the size of the particle ","version":null,"tagName":"h3"},{"title":"LivingEntity","type":0,"sectionRef":"#","url":"/globals/Player/LivingEntity","content":"LivingEntity This page is a WIP!","keywords":"","version":null},{"title":"Texture","type":0,"sectionRef":"#","url":"/globals/Textures/Texture","content":"Texture This page is a WIP!","keywords":"","version":null},{"title":"Textures","type":0,"sectionRef":"#","url":"/globals/Textures","content":"Textures This page is a WIP!","keywords":"","version":null},{"title":"Nameplate","type":0,"sectionRef":"#","url":"/globals/Nameplate","content":"","keywords":"","version":null},{"title":"All​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#all","content":"ALL has a single function, setText nameplate.ALL:setText(&quot;Me&quot;)  ","version":null,"tagName":"h2"},{"title":"Chat​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#chat","content":"CHAT only has two functions: getText and setText nameplate.CHAT:setText(&quot;Me&quot;) nameplate.CHAT:getText()  nameplate.ALL:getText() only gets the nameplate changes made by setText , so if you haven't previously set the text, it will return nil. This is true for all permutations of getText ","version":null,"tagName":"h2"},{"title":"List​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#list","content":"CHAT and LIST have the same functions nameplate.LIST:setText(&quot;Me&quot;) nameplate.LIST:getText()  ","version":null,"tagName":"h2"},{"title":"Entity​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#entity","content":"The entity nameplate has far more functions, they are all accessed via ENTITY, here are some examples nameplate.ENTITY:setText(&quot;Me&quot;) nameplate.ENTITY:setPos(0, 1, 0) nameplate.ENTITY:setShadow(true)  ","version":null,"tagName":"h2"},{"title":"setText(string)​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#settextstring","content":"Sets the text of the nameplate ","version":null,"tagName":"h3"},{"title":"getText​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#gettext","content":"Gets the text of the nameplate as set by setText ","version":null,"tagName":"h3"},{"title":"setVisible(bool)​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#setvisiblebool","content":"Sets the visibility of the nameplate ","version":null,"tagName":"h3"},{"title":"isVisible​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#isvisible","content":"Gets the visibility of the nameplate ","version":null,"tagName":"h3"},{"title":"setPos(vec3)​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#setposvec3","content":"Sets the position of the nameplate in blocks, this is an offset of the pivot location so 0,0,0 is the pivot's location ","version":null,"tagName":"h3"},{"title":"getPos​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#getpos","content":"Gets the position of the nameplate ","version":null,"tagName":"h3"},{"title":"setScale(vec3)​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#setscalevec3","content":"Sets the scale of the nameplate ","version":null,"tagName":"h3"},{"title":"getScale​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#getscale","content":"Gets the scale of the nameplate ","version":null,"tagName":"h3"},{"title":"setPivot(vec3)​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#setpivotvec3","content":"Sets the pivot of the nameplate ","version":null,"tagName":"h3"},{"title":"getPivot​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#getpivot","content":"Gets the pivot of the nameplate ","version":null,"tagName":"h3"},{"title":"setLight(vec2)​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#setlightvec2","content":"Sets the brightness of the nameplate text, the first arg is blockLight and the second arg is skyLight ","version":null,"tagName":"h3"},{"title":"getLight​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#getlight","content":"Gets the brightness of the nameplate text as set by setLight ","version":null,"tagName":"h3"},{"title":"setOutline(bool)​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#setoutlinebool","content":"Sets if the nameplate text should be outlined. Incompatible with setShadow ","version":null,"tagName":"h3"},{"title":"hasOutline​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#hasoutline","content":"Gets if the nameplate has an outline ","version":null,"tagName":"h3"},{"title":"setOutlineColor(vec3)​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#setoutlinecolorvec3","content":"Sets the color used for the outline in rgb format and 0-1 ex: (100/255,100/255,100/255) ","version":null,"tagName":"h3"},{"title":"setBackgroundColor(vec4)​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#setbackgroundcolorvec4","content":"Sets the color of the nameplate background, in rgba format and 0-1 ex: (100/255,100/255,100/255,100/255) ","version":null,"tagName":"h3"},{"title":"getBackgroundColor​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#getbackgroundcolor","content":"Gets the color of the nameplate background as set by setBackgroundColor ","version":null,"tagName":"h3"},{"title":"setShadow(bool)​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#setshadowbool","content":"Sets if the nameplate text has a shadow ","version":null,"tagName":"h3"},{"title":"hasShadow​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#hasshadow","content":"Gets if the nameplate has a shadow ","version":null,"tagName":"h3"},{"title":"Using JSON​","type":1,"pageTitle":"Nameplate","url":"/globals/Nameplate#using-json","content":"If you wish to change the properties of the text outside of just the text, you can use json to change things like color, boldness, or any other properties you can give text in Minecraft, including via the color codes. You can also use a json text generator from anywhere online. nameplate.ENTITY:setText('[{&quot;color&quot;:&quot;red&quot;,&quot;text&quot;:&quot;Me&quot;},{&quot;text&quot;:&quot;!&quot;,&quot;color&quot;:&quot;#09ff71&quot;}]')  Here's an example, you must wrap all the json given in apostrophes (') like in this example. A json generator will not come with the apostrophes around it, you need to add those yourself ","version":null,"tagName":"h2"},{"title":"VanillaModelPart","type":0,"sectionRef":"#","url":"/globals/Vanilla-Model/VanillaModelPart","content":"VanillaModelPart This page is a WIP!","keywords":"","version":null},{"title":"TextureAtlas","type":0,"sectionRef":"#","url":"/globals/Textures/TextureAtlas","content":"TextureAtlas This page is a WIP!","keywords":"","version":null},{"title":"vec","type":0,"sectionRef":"#","url":"/globals/Vectors/vec","content":"vec An alias for &quot;vectors.vec&quot;","keywords":"","version":null},{"title":"Vanilla Model","type":0,"sectionRef":"#","url":"/globals/Vanilla-Model","content":"Vanilla Model This page is a WIP!","keywords":"","version":null},{"title":"Vectors","type":0,"sectionRef":"#","url":"/globals/Vectors","content":"Vectors This page is a WIP!","keywords":"","version":null},{"title":"Vector3","type":0,"sectionRef":"#","url":"/globals/Vectors/Vector3","content":"Vector3 This page is a WIP!","keywords":"","version":null},{"title":"VanillaModelGroup","type":0,"sectionRef":"#","url":"/globals/Vanilla-Model/VanillaModelGroup","content":"VanillaModelGroup This page is a WIP!","keywords":"","version":null},{"title":"Biome","type":0,"sectionRef":"#","url":"/globals/World/Biome","content":"Biome This page is a WIP!","keywords":"","version":null},{"title":"VanillaPart","type":0,"sectionRef":"#","url":"/globals/Vanilla-Model/VanillaPart","content":"VanillaPart This page is a WIP!","keywords":"","version":null},{"title":"Vector2","type":0,"sectionRef":"#","url":"/globals/Vectors/Vector2","content":"Vector2 This page is a WIP!","keywords":"","version":null},{"title":"ItemStack","type":0,"sectionRef":"#","url":"/globals/World/ItemStack","content":"ItemStack This page is a WIP!","keywords":"","version":null},{"title":"Vector4","type":0,"sectionRef":"#","url":"/globals/Vectors/Vector4","content":"Vector4 This page is a WIP!","keywords":"","version":null},{"title":"World","type":0,"sectionRef":"#","url":"/globals/World","content":"","keywords":"","version":null},{"title":"exists​","type":1,"pageTitle":"World","url":"/globals/World#exists","content":"Checks whether or not a world currently exists This will almost always be true, but might be false on some occasions such as while traveling between dimensions ","version":null,"tagName":"h3"},{"title":"getPlayers​","type":1,"pageTitle":"World","url":"/globals/World#getplayers","content":"Returns a table containing instances of Player for all players in the world The players are indexed by their names ","version":null,"tagName":"h3"},{"title":"getTime​","type":1,"pageTitle":"World","url":"/globals/World#gettime","content":"Gets the current game time of the world If delta is passed in, then it adds delta to the time The default value of delta is zero ","version":null,"tagName":"h3"},{"title":"getTimeOfDay​","type":1,"pageTitle":"World","url":"/globals/World#gettimeofday","content":"Gets the current day time of the world If delta is passed in, then it adds delta to the time The default value of delta is zero ","version":null,"tagName":"h3"},{"title":"getMoonPhase​","type":1,"pageTitle":"World","url":"/globals/World#getmoonphase","content":"Gets the current moon phase of the world, stored as an integer ","version":null,"tagName":"h3"},{"title":"getDimension​","type":1,"pageTitle":"World","url":"/globals/World#getdimension","content":"Gets the dimension name of this world ","version":null,"tagName":"h3"},{"title":"getBiome(vec3)​","type":1,"pageTitle":"World","url":"/globals/World#getbiomevec3","content":"Gets the Biome located at the given position ","version":null,"tagName":"h3"},{"title":"getEntity(string)​","type":1,"pageTitle":"World","url":"/globals/World#getentitystring","content":"Returns an EntityAPI object from this UUID's entity, or nil if no entity was found ","version":null,"tagName":"h3"},{"title":"getBlockState(vec3)​","type":1,"pageTitle":"World","url":"/globals/World#getblockstatevec3","content":"Gets the BlockState of the block at the given position ","version":null,"tagName":"h3"},{"title":"getStrongRedstonePower(vec3)​","type":1,"pageTitle":"World","url":"/globals/World#getstrongredstonepowervec3","content":"Gets the direct redstone power level of the block at the given position ","version":null,"tagName":"h3"},{"title":"getRedstonePower(vec3)​","type":1,"pageTitle":"World","url":"/globals/World#getredstonepowervec3","content":"Gets the redstone power level of the block at the given position ","version":null,"tagName":"h3"},{"title":"getSkyLightLevel(vec3)​","type":1,"pageTitle":"World","url":"/globals/World#getskylightlevelvec3","content":"Gets the sky light level of the block at the given position ","version":null,"tagName":"h3"},{"title":"getBlockLightLevel(vec3)​","type":1,"pageTitle":"World","url":"/globals/World#getblocklightlevelvec3","content":"Gets the block light level of the block at the given position ","version":null,"tagName":"h3"},{"title":"getLightLevel(vec3)​","type":1,"pageTitle":"World","url":"/globals/World#getlightlevelvec3","content":"Gets the overall light level of the block at the given position ","version":null,"tagName":"h3"},{"title":"isOpenSky(vec3)​","type":1,"pageTitle":"World","url":"/globals/World#isopenskyvec3","content":"Gets whether or not the sky is open at the given position ","version":null,"tagName":"h3"},{"title":"getRainGradient(delta)​","type":1,"pageTitle":"World","url":"/globals/World#getraingradientdelta","content":"Gets the current rain gradient in the world, interpolated from the previous tick to the current one The default value of delta is 1, which is the current tick ","version":null,"tagName":"h3"},{"title":"isThundering​","type":1,"pageTitle":"World","url":"/globals/World#isthundering","content":"Gets whether or not there is currently thunder/lightning happening in the world ","version":null,"tagName":"h3"},{"title":"getBuildHeight​","type":1,"pageTitle":"World","url":"/globals/World#getbuildheight","content":"Returns the minimum and maximum build height of the world, as varargs ","version":null,"tagName":"h3"},{"title":"getSpawnPoint​","type":1,"pageTitle":"World","url":"/globals/World#getspawnpoint","content":"Returns a vector with the coordinates of the world spawn ","version":null,"tagName":"h3"},{"title":"Renderer","type":0,"sectionRef":"#","url":"/globals/Renderer","content":"","keywords":"","version":null},{"title":"Altering the Camera​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#altering-the-camera","content":"","version":null,"tagName":"h2"},{"title":"setOffsetCameraPivot(vec3)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setoffsetcamerapivotvec3","content":"Sets the offset pivot for the camera The pivot will also move the camera Its values are relative to the world Nil values for pivot are assumed to be 0 For absolute rotation values, check out the non-offset pivot function ","version":null,"tagName":"h3"},{"title":"getCameraOffsetPivot​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getcameraoffsetpivot","content":"Gets the offset pivot for the camera ","version":null,"tagName":"h3"},{"title":"setCameraPivot(vec3)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setcamerapivotvec3","content":"Sets the absolute pivot for the camera The pivot will also move the camera Its values are relative to the World Nil values for pivot are assumed to be 0 For relative rotation values, check out the &quot;offset&quot; pivot function ","version":null,"tagName":"h3"},{"title":"getCameraPivot​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getcamerapivot","content":"Gets the absolute pivot for the camera ","version":null,"tagName":"h3"},{"title":"setCameraPos(vec3)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setcameraposvec3","content":"Sets the position offset for the camera Nil values for position are assumed to be 0 ","version":null,"tagName":"h3"},{"title":"getCameraPos​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getcamerapos","content":"Gets the position offset for the camera ","version":null,"tagName":"h3"},{"title":"setOffsetCameraRot(vec3)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setoffsetcamerarotvec3","content":"Sets the offset rotation for the camera Nil values for rotation are assumed to be 0 Angles are given in degrees For absolute rotation values, check out the non-offset rot function ","version":null,"tagName":"h3"},{"title":"getCameraOffsetRot​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getcameraoffsetrot","content":"Gets the offset rotation for the camera ","version":null,"tagName":"h3"},{"title":"setCameraRot(vec3)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setcamerarotvec3","content":"Sets the absolute rotation of the camera The position is not taken into account for roll Nil values for rotation are assumed to be 0 For relative rotation values, check out the &quot;offset&quot; rot function ","version":null,"tagName":"h3"},{"title":"getCameraRot​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getcamerarot","content":"Gets the absolute rotation of the camera ","version":null,"tagName":"h3"},{"title":"setCameraMatrix(matrix4)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setcameramatrixmatrix4","content":"Sets the camera matrix with the given matrix ","version":null,"tagName":"h3"},{"title":"getCameraMatrix​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getcameramatrix","content":"Returns the modified camera matrix ","version":null,"tagName":"h3"},{"title":"setCameraNormal(matrix3)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setcameranormalmatrix3","content":"Sets the camera normal matrix with the given matrix ","version":null,"tagName":"h3"},{"title":"getCameraNormal​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getcameranormal","content":"Returns the modified camera normal matrix ","version":null,"tagName":"h3"},{"title":"Detecting Camera Information​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#detecting-camera-information","content":"","version":null,"tagName":"h2"},{"title":"isFirstPerson​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#isfirstperson","content":"Checks if your camera is in the first person view ","version":null,"tagName":"h3"},{"title":"isCameraBackwards​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#iscamerabackwards","content":"Checks if your camera is in the backwards third person view ","version":null,"tagName":"h3"},{"title":"Element Rendering​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#element-rendering","content":"","version":null,"tagName":"h2"},{"title":"setOutlineColor(vec3)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setoutlinecolorvec3","content":"Sets the glowing effect outline color ","version":null,"tagName":"h3"},{"title":"getOutlineColor​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getoutlinecolor","content":"Gets the glowing effect outline color set by setOutlineColor ","version":null,"tagName":"h3"},{"title":"setBlockOutlineColor(vec4)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setblockoutlinecolorvec4","content":"Sets the color of the selected block outline Default alpha is 0.4 Might not be compatible with shaders ","version":null,"tagName":"h3"},{"title":"getBlockOutlineColor​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getblockoutlinecolor","content":"Returns the set color for the selected block outline ","version":null,"tagName":"h3"},{"title":"setPrimaryFireTexture(string)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setprimaryfiretexturestring","content":"Sets a custom primary fire texture, to render while the entity is on fire The effect is compound by two layers The secondary layer is what renders in first person The absence of a secondary layer uses the primary layer as fallback ","version":null,"tagName":"h3"},{"title":"getPrimaryFireTexture​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getprimaryfiretexture","content":"Gets the current custom primary fire texture ","version":null,"tagName":"h3"},{"title":"setSecondaryFireTexture(string)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setsecondaryfiretexturestring","content":"Sets a custom secondary fire texture, to render while the entity is on fire The effect is compound by two layers The secondary layer is what renders in first person The absence of a secondary layer uses the primary layer as fallback ","version":null,"tagName":"h3"},{"title":"getSecondaryFireTexture​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getsecondaryfiretexture","content":"Gets the current custom secondary fire texture ","version":null,"tagName":"h3"},{"title":"setCrosshairOffset(vec2)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setcrosshairoffsetvec2","content":"Sets the offset of your crosshair ","version":null,"tagName":"h3"},{"title":"getCrosshairOffset​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getcrosshairoffset","content":"Gets the offset of your crosshair ","version":null,"tagName":"h3"},{"title":"setRenderCrosshair(bool)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setrendercrosshairbool","content":"Sets if your crosshair should be rendered ","version":null,"tagName":"h3"},{"title":"shouldRenderCrosshair​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#shouldrendercrosshair","content":"Check if your crosshair should be rendered ","version":null,"tagName":"h3"},{"title":"setRenderVehicle(bool)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setrendervehiclebool","content":"Sets if your vehicle should be rendered ","version":null,"tagName":"h3"},{"title":"shouldRenderVehicle​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#shouldrendervehicle","content":"Check if your vehicle should be rendered ","version":null,"tagName":"h3"},{"title":"setRenderFire(bool)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setrenderfirebool","content":"Sets if the fire effect should be rendered ","version":null,"tagName":"h3"},{"title":"shouldRenderFire​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#shouldrenderfire","content":"Checks if the fire effect should be rendered ","version":null,"tagName":"h3"},{"title":"setRenderHUD(bool)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setrenderhudbool","content":"Sets if the vanilla HUD should be rendered ","version":null,"tagName":"h3"},{"title":"shouldRenderHUD​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#shouldrenderhud","content":"Checks if the vanilla HUD should be rendered ","version":null,"tagName":"h3"},{"title":"setForcePaperdoll(bool)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setforcepaperdollbool","content":"Sets if the paperdoll should forcefully be rendered ","version":null,"tagName":"h3"},{"title":"shouldForcePaperdoll​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#shouldforcepaperdoll","content":"Check if the paperdoll should forcefully be rendered ","version":null,"tagName":"h3"},{"title":"setShadowRadius(number)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setshadowradiusnumber","content":"Sets the radius of your shadow The default value is nil, which means to use the vanilla default of 0.5 for players The maximum value is 12 ","version":null,"tagName":"h3"},{"title":"getShadowRadius​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getshadowradius","content":"Gets the radius of your shadow ","version":null,"tagName":"h3"},{"title":"setUpsideDown(bool)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setupsidedownbool","content":"Sets if this entity will be rendered upside down ","version":null,"tagName":"h3"},{"title":"isUpsideDown​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#isupsidedown","content":"Checks if this entity should be rendered upside down ","version":null,"tagName":"h3"},{"title":"setBlockOutlineColor(vec4)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setblockoutlinecolorvec4-1","content":"Sets the color of the selected block outline Default alpha is 0.4 Might not be compatible with shaders ","version":null,"tagName":"h3"},{"title":"getBlockOutlineColor​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getblockoutlinecolor-1","content":"Returns the set color for the selected block outline Default nil ","version":null,"tagName":"h3"},{"title":"setPostEffect(string)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setposteffectstring","content":"Sets the current rendering effect Same as the discontinued Super Secret Settings ","version":null,"tagName":"h3"},{"title":"setFOV(number)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setfovnumber","content":"Sets the multiplier of your fov The default value is nil, which means no changes will be applied to your fov ","version":null,"tagName":"h3"},{"title":"getFOV​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getfov","content":"Gets the multiplier of your FOV, as set by setFOV ","version":null,"tagName":"h3"},{"title":"setRenderLeftArm(bool)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setrenderleftarmbool","content":"Toggle if the left arm should be rendered in first person, regardless if you are holding an item or not ","version":null,"tagName":"h3"},{"title":"getRenderLeftArm​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getrenderleftarm","content":"Gets if the left arm should be rendered while in first person ","version":null,"tagName":"h3"},{"title":"setRenderRightArm(bool)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#setrenderrightarmbool","content":"Toggle if the right arm should be rendered in first person, regardless if you are holding an item or not ","version":null,"tagName":"h3"},{"title":"getRenderRightArm​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#getrenderrightarm","content":"Gets if the right arm should be rendered while in first person ","version":null,"tagName":"h3"},{"title":"setEyeOffset(vec3)​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#seteyeoffsetvec3","content":"Sets an offset for the entity eye position, altering the targeted block and entity Note: This function can be caught by anti-cheats and could get you banned from servers ","version":null,"tagName":"h3"},{"title":"getEyeOffset​","type":1,"pageTitle":"Renderer","url":"/globals/Renderer#geteyeoffset","content":"Returns the offset for the entity eye position, as set by setEyeOffset ","version":null,"tagName":"h3"},{"title":"getBlocks(vec3,vec3)​","type":1,"pageTitle":"World","url":"/globals/World#getblocksvec3vec3","content":"Gets a list of all BlockStates in the specified area The maximum area size is 8 x 8 x 8 ","version":null,"tagName":"h3"},{"title":"newItem(string,integer,integer)​","type":1,"pageTitle":"World","url":"/globals/World#newitemstringintegerinteger","content":"Parses and create a new ItemStack from the given string A count and damage can be given, to be applied on this itemstack ","version":null,"tagName":"h3"},{"title":"newBlock(string,vec3)​","type":1,"pageTitle":"World","url":"/globals/World#newblockstringvec3","content":"Parses and create a new BlockState from the given string A world position can be optionally given for the blockstate functions that relies on its position ","version":null,"tagName":"h3"},{"title":"avatarVars​","type":1,"pageTitle":"World","url":"/globals/World#avatarvars","content":"Returns a table containing variables stored from all loaded Avatars &quot;avatar:store()&quot; function The table will be indexed by the avatar's owner UUID ","version":null,"tagName":"h3"},{"title":"BlockBench","type":0,"sectionRef":"#","url":"/start_here/BlockBench","content":"","keywords":"","version":null},{"title":"Project Properties​","type":1,"pageTitle":"BlockBench","url":"/start_here/BlockBench#project-properties","content":"This is the popup that appears when you create a Project. You can also get to this page via File-&gt;Project.    Figura only accepts  bbmodels in the Generic Model format. If your format is not Generic Model, Figura will refuse to load the avatar. To convert a project, File-&gt;Convert Project. Deselect Create Copy , ensure format is Generic Model, and press Confirm. If the popup does not go away after pressing Confirm, close it manually.    The File Name and Model Identifier fields are unused by Figura.  UV Mode determines how BlockBench handles how UVs are positioned. Figura will handle both Box UV and Per-face UV . Its up to you which you want. UVs determine where a 2D texture is applied to a 3D model. Each face has it's own UV coordinates which determines where on the 2D texture it will get it's pixels from.    Box UV forces each face of a cube to match how vanilla does UVs. If you have ever edited your own vanilla skin before, you will recognize the pattern. While this does simplify the texturing process, it limits what you can do. Also, all textures in the model must have the same size, as what is a pixel is determined by the project's global Texture Size instead of the size of the texture itself. Also, meshes cannot be used while using Box UV    Per-face UV allows full control over each face of the cube/mesh. Each face can be positioned, scaled, and rotated individually from each other. You can even set a different texture for each face, or remove a face to reduce clutter. While the pixel grid is effected by the project's global Texture Size , changing the Texture Size has zero effect on the UVs themselves, unlike Box UV which will have destructive effects when changing the project  Texture Size .  The Texture Size field aids with UV calculation. In rendering, UVs are a float from 0-1 representing the percentage of the texture that this point is at. A UV of (0.5,0.5) represents the center of the texture, regardless of the texture's own size. A way of calculating this percentage is to take the pixel coordinate you want and divide it by the texture's size. (32,16)/(64,64)=(0.5,0.25). The Texture Size field determines this texture size globally. BlockBench never uses the texture's actual size, which causes issues when you have a model with textures of different sizes. Thankfully, changing it only has an effect om ModelParts that use Box UV, so when you need to edit ModelParts using a different sized texture, you can change this with no worries so long as you are using Per-face UV.  ","version":null,"tagName":"h2"},{"title":"ModelParts​","type":1,"pageTitle":"BlockBench","url":"/start_here/BlockBench#modelparts","content":"","version":null,"tagName":"h2"},{"title":"ParentTypes​","type":1,"pageTitle":"BlockBench","url":"/start_here/BlockBench#parenttypes","content":"If the name of a group begins with a specific string, Figura will apply special effects to that group. Some examples include &quot;Head&quot;, &quot;RightArm&quot;, &quot;World&quot;. These are called ParentTypes. ","version":null,"tagName":"h3"},{"title":"Blank Texture​","type":1,"pageTitle":"BlockBench","url":"/start_here/BlockBench#blank-texture","content":"ModelParts that use the BlockBench inbuilt Blank texture will not be loaded by Figura at all. If you want a Model to not have a texture and assign the texture via script, use the ignoredTextures metadata customization. The Transparent texture that can only be applied to individual faces in Per-face UV behave the same way. Figura will not load those faces. ","version":null,"tagName":"h3"},{"title":"Meshes​","type":1,"pageTitle":"BlockBench","url":"/start_here/BlockBench#meshes","content":" Meshes are allowed. Nothing special with Figura. This is just here for those that need to be explicitly told Meshes work. ","version":null,"tagName":"h3"},{"title":"Textures​","type":1,"pageTitle":"BlockBench","url":"/start_here/BlockBench#textures","content":"","version":null,"tagName":"h2"},{"title":"Local/External Textures​","type":1,"pageTitle":"BlockBench","url":"/start_here/BlockBench#localexternal-textures","content":"In BlockBench, textures have 2 distinct states: Local and External. To determine the state your texture is in, Right Click a texture-&gt;Properties. An External texture will have a file path, while a Local one will not. There is one key factor for a texture to be External, and that is for the file itself to be inside the avatar's folder. If the filepath does not lead to a file inside the avatar's folder, Figura will load it as a Local file.     Whether a texture is Local or External will determine how Figura will load it which is important when getting a Texture in script.  The Render Mode field determines how the texture will be rendered. In BlockBench, this changes nothing visually. Figura ignores Render Mode. The Primary Texture will always be &quot;TRANSLUCENT&quot; by default, and the Secondary Texture will always be &quot;EMISSIVE&quot; by default.  The Render Sides field determines if the cube should be rendered when looking at the back of a face. Figura ignores Render Sides. To apply the same effect, use the &quot;TRANSLUCENT_CULL&quot; RenderType in a script.  ","version":null,"tagName":"h3"},{"title":"Texture Suffix​","type":1,"pageTitle":"BlockBench","url":"/start_here/BlockBench#texture-suffix","content":"In BlockBench, each cube (face) can only point to a single texture, which means that Figura needs to get creative when it wants to link multiple textures together for stuff like emissive textures. When Figura loads a texture, it looks for another texture with the same name but with a specific suffix. Then for all ModelParts in BlockBench that use the texture, Figura will link the suffixed texture to that ModelPart as well. List of suffixes used by Figura: \\_e: This texture will be used as the Secondary Texture, also known as the [Emissive Texture](../tutorials/Emissive%20Textures), of the ModelPart. The Secondary RenderType of a ModelPart is by default &quot;EMISSIVE&quot;, but can be changed in script.\\_n: This texture will be used as the [Normal Texture](https://en.wikipedia.org/wiki/Normal_mapping). Do not confuse this with the Primary Texture. &quot;Normal&quot; means something very specific in modeling. This suffix is used with Iris Shaders, and does nothing with vanilla rendering. This suffix currently does not function.\\_s: This texture will be used as the [Specular Texture](https://en.wikipedia.org/wiki/Specularity). This suffix is used with Iris Shaders, and does nothing with vanilla rendering. This suffix currently does not function. An example is the Head, skin, and skin_e. When the Head uses the texture skin, when the Avatar is loaded, skin_e is used as the Secondary Texture, ie the Emissive Texture.    For a texture to have the same name, they must both be either Local or External, and should they be external, they must be in the same folder. Otherwise, they will not have the same name internally. For textures with file extensions, the suffix goes before the extension. skin_e.png  ","version":null,"tagName":"h3"},{"title":"Animations​","type":1,"pageTitle":"BlockBench","url":"/start_here/BlockBench#animations","content":"","version":null,"tagName":"h2"},{"title":"Animation Properties​","type":1,"pageTitle":"BlockBench","url":"/start_here/BlockBench#animation-properties","content":"This popup appears when you create an animation. To get back to this popup, Right Click an Animation-&gt;Properties.    Name is the animation's name. It is very important that you change this to something shorter. The entire textbox is the animation's name, so unless you want to refer to this animation in lua with animations.player[&quot;animation.model.new&quot;] , change the name. An animation named just &quot;new&quot; is indexed via animations.player.new . Much nicer, right?   Loop Mode controls what happens when the animation stops. There are 3 valid loop modes: Play Once, Hold On Last Frame, and Loop.  Play Once stops the animation once the animation ends.  Hold On Last Frame keeps the animation values from the end of the animation. The animation is still technically playing.  Loop sets the animation's time to 0, or to the animation's end if the animation is playing backwards.   Override determines if Mimic-type ParentTypes will apply their transformations while this animation is playing. It only effects ModelParts that have a keyframe in this animation. Default false   Snapping determines the snapping distance for keyframes. Holding ctrl while moving a keyframe ignores this. Figura does not care about this value .   Anim Time Update . I have no clue what this does in blockbench, but figura uses this value for determining the start offset. In other words, when you call play this is the time that figura will start the animation at. This allows you to put keyframes behind the start of the animation which can help with Cubic Interpolation keyframes. Default is 0 .   Blend Weight is a multiplier for every single keyframe in the animation. Not very useful as a property, but it can be changed in script to raise or reduce the intensity of animations. Default is 1 .   Start Delay is the time it takes after calling play for the animation to actually start. Default is 0 .   Loop Delay is a property that only shows up with the Loop Loop Mode . It adds a delay between the animation ending, then starting again. Default is 0 .   ","version":null,"tagName":"h3"},{"title":"Keyframe Expressions​","type":1,"pageTitle":"BlockBench","url":"/start_here/BlockBench#keyframe-expressions","content":"While blockbench supports Molang, Figura does not. To remedy this, Figura allows writing lua code into keyframe fields.  Figura provides data for the keyframe expression, which is accessible via the ... variable. It has 2 pieces of data, the keyframe time, and the Animation object of the animation itself. Keyframe time is measured in percentage, not seconds. So assuming a Step interpolation keyframe, 0 is at the time at the keyframe itself, and 1 is at the next keyframe. Keyframe time is only useful when the keyframe uses Step interpolation. When using other interpolation types, the expression will execute before it has reached the keyframe itself to interpolate. While this happens, it will give the Keyframe time of the previous keyframe and go back to zero once it reaches itself. They can be extracted via the following line: local time, anim = ...  Keyframe Expressions accept 2 different formats: A single lua expression that evaluates to a numberA lua script that returns a number math.sin(world.getTime()) is a single lua expression, so it is a valid Keyframe Expression. However, local _, anim=... math.sin(anim:getTime()) is not a single lua expression and will need to have an explicit return value: local _, anim = ... return math.sin(anim:getTime())  Alternatively, you can rewrite it as a single lua expression: math.sin({...}[2]:getTime()) This deconstructs the ... varargs into a table and grabs the second value. ","version":null,"tagName":"h3"},{"title":"Instruction Keyframes​","type":1,"pageTitle":"BlockBench","url":"/start_here/BlockBench#instruction-keyframes","content":"Instruction Keyframes run lua code when the Animation reaches that keyframe. This can be used to play sounds, spawn particles, literally anything. Remember that Lua code is what goes in this spot, not Molang. You can access Instruction Keyframes via the Magic Wand icon. An Effects timeline should appear along with the other ModelPart timelines. ","version":null,"tagName":"h3"},{"title":"Animation Features That Figura Does Not Care About​","type":1,"pageTitle":"BlockBench","url":"/start_here/BlockBench#animation-features-that-figura-does-not-care-about","content":"Below are features provided by BlockBench Animations that figura does not use when loading the bbmodel.  Variable Placeholders    This is completely ignored by Figura.  Inverse Kinematics Don't bother. Not a thing in Figura. Global Rotation There is a toggle for Global Rotation next to the Rotation timeline for ModelParts. Figura does not obey this, so keep it disabled.  Sound Keyframes Figura does not read these. Use Instruction Keyframes.  Particle Keyframes Figura does not read these. Use Instruction Keyframes.  ","version":null,"tagName":"h3"},{"title":"BlockState","type":0,"sectionRef":"#","url":"/globals/World/BlockState","content":"BlockState This page is a WIP!","keywords":"","version":null},{"title":"Animations","type":0,"sectionRef":"#","url":"/tutorials/Animations","content":"","keywords":"","version":null},{"title":"Playing an Animation​","type":1,"pageTitle":"Animations","url":"/tutorials/Animations#playing-an-animation","content":"In order to play an animation you need to index the animation through the Blockbench model it is in and the animations global. Let's say we have a Blockbench model named example  and an animation named idle  If we want to play this animation we can use this code: animations.example.idle:play()  animations stores all the animation data for every Blockbench model.  The next part of the index is always the Blockbench model name that contains the animation you want to play, in our case this is example.bbmodel (if your Blockbench model is in a subfolder, that will need to be included as well, but you can find more information about that in ModelPart Indexing) And the last is always the animation name, in this case idle. ","version":null,"tagName":"h2"},{"title":"Blockbench is Tricking You​","type":1,"pageTitle":"Animations","url":"/tutorials/Animations#blockbench-is-tricking-you","content":"If you're looking at your animation in Blockbench and there's two names, the smaller name in gray is the actual animation name.  You can't use the method above to play the animation if it looks like this iamge You have two options: Rename the animation, or deal with the long animation name ","version":null,"tagName":"h2"},{"title":"Option One:​","type":1,"pageTitle":"Animations","url":"/tutorials/Animations#option-one","content":"Rename the animation  ","version":null,"tagName":"h3"},{"title":"Option Two:​","type":1,"pageTitle":"Animations","url":"/tutorials/Animations#option-two","content":"Deal with the animation name by changing the code. animations.example[&quot;animation.model.idle&quot;]:play()  ","version":null,"tagName":"h3"},{"title":"Alternatives to play()​","type":1,"pageTitle":"Animations","url":"/tutorials/Animations#alternatives-to-play","content":"There is another function that can play animations, setPlaying(bool) You can put a boolean value inside the parenthesis for the function and it will play the animation if the boolean is true, or stop it if the boolean is false ","version":null,"tagName":"h2"},{"title":"setPlaying Example​","type":1,"pageTitle":"Animations","url":"/tutorials/Animations#setplaying-example","content":"By nature, setPlaying needs to be in a function that will run multiple times, we're going to use a tick event but you could use a ping or anything else function events.tick() local crouching = player:getPose() == &quot;CROUCHING&quot; -- This detects if you are crouching and stores it into crouch. -- So: crouch == true when crouching, and crouch == false when you're not crouching animations.example.idle:setPlaying(crouching) end  And now our animation idle will play whenever we're crouching! This methodology can be expanded infinitely but it gets more complex the more animations you add. ","version":null,"tagName":"h3"},{"title":"Simple Idle-Walk-Sprint-Crouch Setup​","type":1,"pageTitle":"Animations","url":"/tutorials/Animations#simple-idle-walk-sprint-crouch-setup","content":"As an example we'll do code for a set of four animations: idle, walk, sprint, and crouch. Here's our animations in our Blockbench model.  function events.tick() local crouching = player:getPose() == &quot;CROUCHING&quot; -- This is the same line of code from the previous example local walking = player:getVelocity().xz:length() &gt; .01 -- walking == true when moving, and walking == false when still (or going directly up/down as we excluded the y axis) local sprinting = player:isSprinting() -- If you want to find more player functions, check out the Player Global page -- Now we're going to use a lot of logic to figure out when animations should/shouldn't play animations.example.idle:setPlaying(not walking and not crouching) -- You're idle when not walking and not crouching animations.example.walk:setPlaying(walking and not crouching and not sprinting) -- You're walking when... walking and not crouching, but you want to make sure you're not sprinting either animations.example.sprint:setPlaying(sprinting and not crouching) -- You probably can catch my drift by now animations.example.crouch:setPlaying(crouching) end  ","version":null,"tagName":"h2"},{"title":"Common Errors​","type":1,"pageTitle":"Animations","url":"/tutorials/Animations#common-errors","content":"","version":null,"tagName":"h2"},{"title":"Fixing the index error​","type":1,"pageTitle":"Animations","url":"/tutorials/Animations#fixing-the-index-error","content":"You might run into some script errors while doing this, here's some solutions to attempt to index ? (a nil value) The error will tell you about a key, the key is AFTER the part that's experiencing an incorrect.  Like in this example, it says that setPlaying is the key, so we know that the problem is BEFORE it. You'll notice that the animation name is misspelled, once you fix that the error will go away or change.  Here it is again, but this time the key is idle, meaning the problem is with the Blockbench model name. You'll notice that it's misspelled in this version, fixing it will make the error go away or change. ","version":null,"tagName":"h3"},{"title":"Errors inside a keyframe​","type":1,"pageTitle":"Animations","url":"/tutorials/Animations#errors-inside-a-keyframe","content":"Errors inside keyframes are vary vastly, but you can indentify them by the name of the animation in the error. Here's three examples:  How you fix this will greatly depend on what the error is. ","version":null,"tagName":"h3"},{"title":"Overriding Vanilla Animations​","type":1,"pageTitle":"Animations","url":"/tutorials/Animations#overriding-vanilla-animations","content":"You can override vanilla animations using the override setting in Blockbench, this is set per-animation and it overrides per-part and per-channel (rotation, position, scale). It only overrides while the animation is playing.   ","version":null,"tagName":"h2"},{"title":"Community Resources​","type":1,"pageTitle":"Animations","url":"/tutorials/Animations#community-resources","content":"","version":null,"tagName":"h2"},{"title":"Jimmy's Animation Handler​","type":1,"pageTitle":"Animations","url":"/tutorials/Animations#jimmys-animation-handler","content":"If you have a lot of animations that need detections, Jimmy's Animation Handler can play your animations for you. Find it here in the Discord ","version":null,"tagName":"h3"},{"title":"GSAnimBlend​","type":1,"pageTitle":"Animations","url":"/tutorials/Animations#gsanimblend","content":"If you want to smooth the transition between animations so it doesn't jump between them you can use GSAnimBlend. Find it here in the Discord ","version":null,"tagName":"h3"},{"title":"Custom Items","type":0,"sectionRef":"#","url":"/tutorials/Custom-Items","content":"","keywords":"","version":null},{"title":"Item Keyword​","type":1,"pageTitle":"Custom Items","url":"/tutorials/Custom-Items#item-keyword","content":"If you give a Blockbench group the Item keyword (by starting the group name with Item) it will be primed and ready to be used as an item. Without the event the Item group will vanish- and so will every item you hold. ","version":null,"tagName":"h2"},{"title":"Item Render Event​","type":1,"pageTitle":"Custom Items","url":"/tutorials/Custom-Items#item-render-event","content":"The item_render event runs once a frame for every item you're holding (so, a max of two) and do their own things in their version of the event. In order to make the Item show up you must return it in the item_render event. This example assumes the bbmodel is named model and that the keyworded group is named Item. If you wish to test this change model to your bbmodel name and the Item group to your version. function events.item_render() return models.model.Item end  This will replace every single item you're holding with your custom item ","version":null,"tagName":"h2"},{"title":"Replacing Specific Items​","type":1,"pageTitle":"Custom Items","url":"/tutorials/Custom-Items#replacing-specific-items","content":"You can use the event's arguments to get different information from the item you're holding, and they are: the itemstack, rendering mode, position, rotation, scale, and if its in the left hand. Possible item rendering modes. function events.item_render(item, mode, pos, rot, scale, left) end  This is storing all the values you can get, but in most cases you only need item and sometimes mode. Let's replace bows, shields, and all swords. These are all for a blockbench model that looks like this: model.bbmodel ├─ ItemSword ├─ ItemBow └─ ItemShield function events.item_render(item) if item.id == &quot;minecraft:bow&quot; then return models.model.ItemBow elseif item.id == &quot;minecraft:shield&quot; then return models.model.ItemShield elseif item.id:find(&quot;sword&quot;) then return models.model.ItemSword end end  The find function is searching the id for the word 'sword' so you don't need to type in every single sword id. This also makes it compatible with modded swords. ","version":null,"tagName":"h2"},{"title":"Things To Note​","type":1,"pageTitle":"Custom Items","url":"/tutorials/Custom-Items#things-to-note","content":"Do not put the Item group inside any other group. The Blockbench outliner should look like this: model.bbmodel └─ Item or model.bbmodel ├─ Item └─ Item2 because you can have more than one of these keywords. Do not nest Item keywords inside another. And, do not have more than one custom item per instance of the Item keyword. You could put your Item group in another group but be careful, doing so makes it easier to cause unwanted behavior. For example, if you put it into RightArm or LeftArm it will be force unrendered, defeating the point of it. 0,0,0 in Blockbench is where the player will be holding the item in the world ","version":null,"tagName":"h2"},{"title":"Emissive Textures","type":0,"sectionRef":"#","url":"/tutorials/Emissive Textures","content":"","keywords":"","version":null},{"title":"Defining a Texture as Emissive​","type":1,"pageTitle":"Emissive Textures","url":"/tutorials/Emissive Textures#defining-a-texture-as-emissive","content":"Every ModelPart in BlockBench has a reference to a single texture. When Figura loads the avatar, Figura looks for a texture with the same name as the texture used by the ModelPart but with _e added to the end of it. For example, the emissive texture used by ModelParts that use texture.png will use texture_e.png as their emissive texture.  \\_e is one of the [texture suffixes](../start_here/BlockBench#texture-suffix) that Figura looks for when loading an avatar. ","version":null,"tagName":"h2"},{"title":"Emissive Texture Behavior​","type":1,"pageTitle":"Emissive Textures","url":"/tutorials/Emissive Textures#emissive-texture-behavior","content":" The pixels on a Texture using the &quot;EMISSIVE&quot; RenderType are not interpreted the same was as a regular texture.  First of all, the alpha values of pixels are ignored. This means that the emissive texture itself cannot be halfway visible. Its either the pixel is completely opaque, or completely gone. No in between. On the texture below, both pixels will render the exact same. Even though they appear to be 2 distinct colors, the right color has an alpha value of 139 and is blending with the gray GitHub background. They have the exact same RGB values and will be rendered exactly the same under the &quot;EMISSIVE&quot; RenderType.   Second, the &quot;brightness&quot; of a pixel is what determines the intensity of the emissive glow. If you know HSV, its the Value that controls this property. Emissive Intensity controls how bright the pixel will render, but also how much of the pixel behind it will show through. On the texture below, both pixels will render with the same color. The pixel on the left will render with max brightness, not allowing the pixels on the base texture to blend through. The pixel on the right won't glow as much, but allows the pixels on the base texture to blend through.   ","version":null,"tagName":"h2"},{"title":"Iris Emissives​","type":1,"pageTitle":"Emissive Textures","url":"/tutorials/Emissive Textures#iris-emissives","content":"If you use Iris, regardless of the fact of if you are currently using custom shaders, the &quot;EMISSIVE&quot; RenderType is modified to use the alpha value when rendering the emissive texture. How exactly is not known. Experimentation is required. ","version":null,"tagName":"h2"},{"title":"Emissive Render Types​","type":1,"pageTitle":"Emissive Textures","url":"/tutorials/Emissive Textures#emissive-render-types","content":"There are three emissive render types: EMISSIVE, EMISSIVE_SOLID, and EYES. All of these require the original _e texture and will make the same pixels glow that are in the _e texture. ","version":null,"tagName":"h2"},{"title":"EMISSIVE​","type":1,"pageTitle":"Emissive Textures","url":"/tutorials/Emissive Textures#emissive","content":"This is the default render type of the _e texture. ","version":null,"tagName":"h3"},{"title":"EMISSIVE_SOLID​","type":1,"pageTitle":"Emissive Textures","url":"/tutorials/Emissive Textures#emissive_solid","content":"Like EMISSIVE, but it doesn't allow transparency, transparent pixels will render as black. ","version":null,"tagName":"h3"},{"title":"EYES​","type":1,"pageTitle":"Emissive Textures","url":"/tutorials/Emissive Textures#eyes","content":"The render type as Enderman and Spider eyes. This will not make the glowing pixels visible while you are under the invisibility effect. ","version":null,"tagName":"h3"},{"title":"Setting Render Type Example​","type":1,"pageTitle":"Emissive Textures","url":"/tutorials/Emissive Textures#setting-render-type-example","content":"To be clear: To use these you still need to have the _e texture, this can simply change the rendering of it You can set the render type to &quot;Eyes&quot; like this models:setSecondaryRenderType(&quot;Eyes&quot;)  Note: The glow on the paperdoll and the skull may look slightly different. ","version":null,"tagName":"h3"},{"title":"Avatar File Format","type":0,"sectionRef":"#","url":"/start_here/Avatar File Format","content":"Avatar File Format Avatars are stored in &lt;minecraftDirectory&gt;/figura/avatars. You can get to this folder quickly via the button in the Figura Menu. A Figura Avatar consists of a named folder or a zip file containing an avatar.json file. That is everything needed for an avatar to appear in Wardrobe. avatars └─ &lt;AvatarName&gt; └─ avatar.json An avatar.json file is just a renamed text file which contains Avatar Metadata in the form of a json object, but it can be empty. It's presence tells Figura that this folder is an Avatar. Figura also looks for an image named avatar.png. This will be used as the avatar's icon which will appear next to it's name in the Wardrobe. avatars └─ &lt;AvatarName&gt; ├─ avatar.json └─ avatar.png Additional files go either in the same folder as the avatar.json, or within a subfolder. All files with the extension .lua will be treated as script files and executed when your avatar is loaded.All files with the extension .bbmodel will be treated as model files. The minimum BlockBench version supported is 4.0.All files with the extension .ogg will be treated as sound files. They must be in Vorbis codec. Stray texture files in the avatar folder will not be loaded by Figura. For a texture to be loaded by Figura, it must be registered as a texture in a bbmodel file. ALL files that begin with a period (.) will be ignored when figura loads an avatar. Files that are not loaded by Figura are not accessible at all, so don't bother trying to get around the 100kb limit with this.","keywords":"","version":null},{"title":"Particles","type":0,"sectionRef":"#","url":"/tutorials/Particles","content":"","keywords":"","version":null},{"title":"Spawning Particles​","type":1,"pageTitle":"Particles","url":"/tutorials/Particles#spawning-particles","content":"particles:newParticle(particleID, position, velocity)  If you're looking on the Minecraft wiki then the particle id is the name under the 'Java Edition ID Name' column. Or, it's the same id used by the /particle command. If you're using Minecraft particles you can exclude the Minecraft &quot;mod name&quot;. particles:newParticle(&quot;minecraft:explosion&quot;, player:getPos())  I've added the player position, but excluded the velocity. Dust example, it's color is included in its name: particles:newParticle(&quot;dust 0 1 1 1&quot;, player:getPos())  This will spawn an aqua dust particle as the color values need a number between 0 and 1, the fourth number is the alpha. I excluded the 'minecraft:' mod name to demonstrate that it's unnecessary. ","version":null,"tagName":"h2"},{"title":"Spawning At A Part Location​","type":1,"pageTitle":"Particles","url":"/tutorials/Particles#spawning-at-a-part-location","content":"To spawn a particle at a modelPart's position you'll need to get the position matrix of that part, and insert it into the position like normal. particles:newParticle(&quot;explosion&quot;, modelPart:partToWorldMatrix():apply())  Where modelPart is a reference to a real modelPart in your avatar. ","version":null,"tagName":"h2"},{"title":"An Alternative Method​","type":1,"pageTitle":"Particles","url":"/tutorials/Particles#an-alternative-method","content":"You can store a reference to a specific particle, and then use it later to change its properties wile it still exists in the world. local boom = particles[&quot;explosion&quot;] function events.entity_init() boom:spawn():setPos(player:getPos()) end  It's in an entity_init event to protect from an entity init error ","version":null,"tagName":"h2"},{"title":"Community Resources​","type":1,"pageTitle":"Particles","url":"/tutorials/Particles#community-resources","content":"","version":null,"tagName":"h2"},{"title":"Confetti by Manuel​","type":1,"pageTitle":"Particles","url":"/tutorials/Particles#confetti-by-manuel","content":"Spawns custom particles that you make in Blockbench. Find here in the Discord. ","version":null,"tagName":"h3"},{"title":"Player","type":0,"sectionRef":"#","url":"/globals/Player","content":"","keywords":"","version":null},{"title":"Player Transformations​","type":1,"pageTitle":"Player","url":"/globals/Player#player-transformations","content":"","version":null,"tagName":"h2"},{"title":"getPos()​","type":1,"pageTitle":"Player","url":"/globals/Player#getpos","content":"Gets the position of the entity in the world If delta is passed in, then it will be used to linearly interpolate the position of the entity between the previous tick and the current tick The default value of delta is 1 Example: player:getPos()   ","version":null,"tagName":"h3"},{"title":"getRot​","type":1,"pageTitle":"Player","url":"/globals/Player#getrot","content":"Gets the rotation of the entity in degrees If delta is passed in, then it will be used to linearly interpolate the rotation of the entity between the previous tick and the current tick The default value of delta is 1 ","version":null,"tagName":"h3"},{"title":"getBodyYaw​","type":1,"pageTitle":"Player","url":"/globals/Player#getbodyyaw","content":"Gets the yaw of this entity's body in degrees If delta is passed in, then it will be used to linearly interpolate the rotation of the body between the previous tick and the current tick The default value of delta is 1 ","version":null,"tagName":"h3"},{"title":"getLookDir​","type":1,"pageTitle":"Player","url":"/globals/Player#getlookdir","content":"Returns a unit vector pointing in the direction that this entity is looking See the blue line in the F3+B screen for an example ","version":null,"tagName":"h3"},{"title":"getVelocity​","type":1,"pageTitle":"Player","url":"/globals/Player#getvelocity","content":"Gets the current velocity of this entity in world coordinates, calculated as its position this tick minus its position last tick ","version":null,"tagName":"h3"},{"title":"Player Actions​","type":1,"pageTitle":"Player","url":"/globals/Player#player-actions","content":"","version":null,"tagName":"h2"},{"title":"getPose​","type":1,"pageTitle":"Player","url":"/globals/Player#getpose","content":"Returns the current pose of the player For players this can be one of: &quot;STANDING&quot;, &quot;FALL_FLYING&quot;, &quot;SLEEPING&quot;, &quot;SWIMMING&quot;, &quot;SPIN_ATTACK&quot;, or &quot;CROUCHING&quot; ","version":null,"tagName":"h3"},{"title":"isCrouching​","type":1,"pageTitle":"Player","url":"/globals/Player#iscrouching","content":"Returns true if this entity is visually sneaking ","version":null,"tagName":"h3"},{"title":"isGliding​","type":1,"pageTitle":"Player","url":"/globals/Player#isgliding","content":"Returns if this entity is gliding with an elytra ","version":null,"tagName":"h3"},{"title":"isFishing​","type":1,"pageTitle":"Player","url":"/globals/Player#isfishing","content":"Returns if the player is currently fishing ","version":null,"tagName":"h3"},{"title":"isBlocking​","type":1,"pageTitle":"Player","url":"/globals/Player#isblocking","content":"Return if this entity is blocking with a shield ","version":null,"tagName":"h3"},{"title":"isVisuallySwimming​","type":1,"pageTitle":"Player","url":"/globals/Player#isvisuallyswimming","content":"Returns if this entity have the swimming pose ","version":null,"tagName":"h3"},{"title":"isClimbing​","type":1,"pageTitle":"Player","url":"/globals/Player#isclimbing","content":"Returns true if the entity is currently using a climbable block, like a ladder or vine ","version":null,"tagName":"h3"},{"title":"isSneaking​","type":1,"pageTitle":"Player","url":"/globals/Player#issneaking","content":"Returns true if this entity is logically sneaking (can't fall from blocks edges, can't see nameplate behind walls, etc) ","version":null,"tagName":"h3"},{"title":"isSprinting​","type":1,"pageTitle":"Player","url":"/globals/Player#issprinting","content":"Returns true if this entity is currently sprinting ","version":null,"tagName":"h3"},{"title":"riptideSpinning​","type":1,"pageTitle":"Player","url":"/globals/Player#riptidespinning","content":"Returns if this entity is riptide spinning ","version":null,"tagName":"h3"},{"title":"Player Data​","type":1,"pageTitle":"Player","url":"/globals/Player#player-data","content":"","version":null,"tagName":"h2"},{"title":"isLoaded​","type":1,"pageTitle":"Player","url":"/globals/Player#isloaded","content":"Checks if this entity object is still being updated and loaded A non loaded entity would be someone who is in another dimension or out of the render distance for example ","version":null,"tagName":"h3"},{"title":"getNbt​","type":1,"pageTitle":"Player","url":"/globals/Player#getnbt","content":"Gets a table containing the NBT of this entity Please note that not all values in the entity's NBT may be synced, as some are handled only on server side ","version":null,"tagName":"h3"},{"title":"getChargedAttackDelay​","type":1,"pageTitle":"Player","url":"/globals/Player#getchargedattackdelay","content":"Returns the delay (in ticks) of charged attacks ","version":null,"tagName":"h3"},{"title":"getExperienceProgress​","type":1,"pageTitle":"Player","url":"/globals/Player#getexperienceprogress","content":"Gets the progress of the way towards the player's next level, as a value from 0 to 1 ","version":null,"tagName":"h3"},{"title":"getExperienceLevel​","type":1,"pageTitle":"Player","url":"/globals/Player#getexperiencelevel","content":"Gets the player's current level ","version":null,"tagName":"h3"},{"title":"getShoulderEntity​","type":1,"pageTitle":"Player","url":"/globals/Player#getshoulderentity","content":"Returns a table of the nbt of this entity left or right shoulder entity ","version":null,"tagName":"h3"},{"title":"getTeamInfo​","type":1,"pageTitle":"Player","url":"/globals/Player#getteaminfo","content":"Returns a table with information about the team of this player Returns nil if the player doesnt have a team ","version":null,"tagName":"h3"},{"title":"getFood​","type":1,"pageTitle":"Player","url":"/globals/Player#getfood","content":"Gets the current food level of the player, from 0 to 20 ","version":null,"tagName":"h3"},{"title":"getGamemode​","type":1,"pageTitle":"Player","url":"/globals/Player#getgamemode","content":"Returns &quot;SURVIVAL&quot;, &quot;CREATIVE&quot;, &quot;ADVENTURE&quot;, or &quot;SPECTATOR&quot; depending on the player's gamemode If the gamemode is unknown, returns nil ","version":null,"tagName":"h3"},{"title":"getSaturation​","type":1,"pageTitle":"Player","url":"/globals/Player#getsaturation","content":"Gets the current saturation level of the player ","version":null,"tagName":"h3"},{"title":"getExhaustion​","type":1,"pageTitle":"Player","url":"/globals/Player#getexhaustion","content":"Gets the current exhaustion level of the player ","version":null,"tagName":"h3"},{"title":"getAbsorptionAmount​","type":1,"pageTitle":"Player","url":"/globals/Player#getabsorptionamount","content":"Returns the amount of this entity's absorption (yellow hearts) ","version":null,"tagName":"h3"},{"title":"getArmor​","type":1,"pageTitle":"Player","url":"/globals/Player#getarmor","content":"Returns the amount of armor points this entity has ","version":null,"tagName":"h3"},{"title":"getMaxHealth​","type":1,"pageTitle":"Player","url":"/globals/Player#getmaxhealth","content":"Returns the maximum amount of health this entity can have ","version":null,"tagName":"h3"},{"title":"getHealth​","type":1,"pageTitle":"Player","url":"/globals/Player#gethealth","content":"Returns the amount of health this entity has remaining ","version":null,"tagName":"h3"},{"title":"getDeathTime​","type":1,"pageTitle":"Player","url":"/globals/Player#getdeathtime","content":"Returns the number of ticks this entity has been dead for ","version":null,"tagName":"h3"},{"title":"getStingerCount​","type":1,"pageTitle":"Player","url":"/globals/Player#getstingercount","content":"Returns the number of bee stingers sticking out of this entity ","version":null,"tagName":"h3"},{"title":"getArrowCount​","type":1,"pageTitle":"Player","url":"/globals/Player#getarrowcount","content":"Returns the number of arrows sticking out of this entity ","version":null,"tagName":"h3"},{"title":"getEntityCategory​","type":1,"pageTitle":"Player","url":"/globals/Player#getentitycategory","content":"Returns the category of this entity The categories are: &quot;ARTHROPOD&quot;, &quot;UNDEAD&quot;, &quot;WATER&quot;, &quot;ILLAGER&quot; and by default, &quot;UNDEFINED&quot; ","version":null,"tagName":"h3"},{"title":"isSensitiveToWater​","type":1,"pageTitle":"Player","url":"/globals/Player#issensitivetowater","content":"Returns if this entity takes damage to water ","version":null,"tagName":"h3"},{"title":"getName​","type":1,"pageTitle":"Player","url":"/globals/Player#getname","content":"Gets the name of this entity, if it has a custom name If it doesn't, returns a translated form of getType() ","version":null,"tagName":"h3"},{"title":"isAlive​","type":1,"pageTitle":"Player","url":"/globals/Player#isalive","content":"Returns whether this entity is alive or not ","version":null,"tagName":"h3"},{"title":"getType​","type":1,"pageTitle":"Player","url":"/globals/Player#gettype","content":"Gets the Minecraft identifier of this entity For instance, &quot;minecraft:pig&quot; ","version":null,"tagName":"h3"},{"title":"getControlledVehicle​","type":1,"pageTitle":"Player","url":"/globals/Player#getcontrolledvehicle","content":"Return the vehicle that this entity is controlling ","version":null,"tagName":"h3"},{"title":"getControllingPassenger​","type":1,"pageTitle":"Player","url":"/globals/Player#getcontrollingpassenger","content":"Returns the entity that is controlling this entity ","version":null,"tagName":"h3"},{"title":"getPassengers​","type":1,"pageTitle":"Player","url":"/globals/Player#getpassengers","content":"Returns a List of entities of all passengers this entity have ","version":null,"tagName":"h3"},{"title":"getFrozenTicks​","type":1,"pageTitle":"Player","url":"/globals/Player#getfrozenticks","content":"Gets the number of ticks this entity has been freezing in powder snow for ","version":null,"tagName":"h3"},{"title":"getMaxAir​","type":1,"pageTitle":"Player","url":"/globals/Player#getmaxair","content":"Gets the maximum amount of air this entity can have ","version":null,"tagName":"h3"},{"title":"getDimensionName​","type":1,"pageTitle":"Player","url":"/globals/Player#getdimensionname","content":"Gets the Minecraft identifier of the dimension this entity is in ","version":null,"tagName":"h3"},{"title":"isUnderwater​","type":1,"pageTitle":"Player","url":"/globals/Player#isunderwater","content":"Returns true if this entity's eyes are touching water ","version":null,"tagName":"h3"},{"title":"isInWater​","type":1,"pageTitle":"Player","url":"/globals/Player#isinwater","content":"Returns true if this entity is currently in a water block, including waterlogging ","version":null,"tagName":"h3"},{"title":"isInRain​","type":1,"pageTitle":"Player","url":"/globals/Player#isinrain","content":"Returns true if this entity is currently standing in rain ","version":null,"tagName":"h3"},{"title":"isWet​","type":1,"pageTitle":"Player","url":"/globals/Player#iswet","content":"Returns true in any of three conditions: if the entity is in water, if the entity is in rain, or if the entity is in a bubble column Otherwise, returns false ","version":null,"tagName":"h3"},{"title":"isInLava​","type":1,"pageTitle":"Player","url":"/globals/Player#isinlava","content":"Returns true if this entity is currently in lava ","version":null,"tagName":"h3"},{"title":"isOnFire​","type":1,"pageTitle":"Player","url":"/globals/Player#isonfire","content":"Returns true if this entity is currently on fire ","version":null,"tagName":"h3"},{"title":"isInvisible​","type":1,"pageTitle":"Player","url":"/globals/Player#isinvisible","content":"Returns true if this entity is invisible, for one reason or another ","version":null,"tagName":"h3"},{"title":"getVehicle​","type":1,"pageTitle":"Player","url":"/globals/Player#getvehicle","content":"Returns a proxy for the entity that this player is currently riding If the player isn't riding anything, returns nil Example combined with getType and with a nil check, the first player:getVehicle() is preventing a nil value from being check by getType() after the and: if player:getVehicle() and player:getVehicle():getType() == &quot;minecraft:pig&quot; then log(&quot;You're riding a pig&quot;) end  ","version":null,"tagName":"h3"},{"title":"isSilent​","type":1,"pageTitle":"Player","url":"/globals/Player#issilent","content":"Returns true if this entity is silent ","version":null,"tagName":"h3"},{"title":"isGlowing​","type":1,"pageTitle":"Player","url":"/globals/Player#isglowing","content":"Returns true if this entity is currently glowing ","version":null,"tagName":"h3"},{"title":"getBoundingBox​","type":1,"pageTitle":"Player","url":"/globals/Player#getboundingbox","content":"Returns the size of this entity's bounding box as a Vector3 {x, y, z} are the width, height, and width Minecraft entity hitboxes always have square bases ","version":null,"tagName":"h3"},{"title":"isOnGround​","type":1,"pageTitle":"Player","url":"/globals/Player#isonground","content":"Returns whether or not this entity is currently on the ground Note: Due to a glitch in Minecraft's code this function is unreliable, and will misfire in multiple situations such as being underwater, standing on a boat, or standing on a slime block. One workaround is to check the blockstate of the block directly underneath the player like so: world.getBlockState(player:getPos():add(0,-0.1,0)):isSolidBlock() ","version":null,"tagName":"h3"},{"title":"getEyeY​","type":1,"pageTitle":"Player","url":"/globals/Player#geteyey","content":"Returns the Y level of this entity's eyes Not to be confused with getEyeHeight, this function also takes the entity itself's Y position into account ","version":null,"tagName":"h3"},{"title":"getEyeHeight​","type":1,"pageTitle":"Player","url":"/globals/Player#geteyeheight","content":"Returns the current eye height of this entity ","version":null,"tagName":"h3"},{"title":"getTargetedEntity(number)​","type":1,"pageTitle":"Player","url":"/globals/Player#gettargetedentitynumber","content":"Returns a proxy for your currently targeted Entity This Entity appears on the F3 screen The number is for distance in blocks to check Maximum and Default distance is 20, Minimum is 0 Example with a nil check: if player:getTargetedEntity(4.5) and player:getTargetedEntity(4.5):getType() == &quot;minecraft:creeper&quot; then log(&quot;You're looking at a creeper&quot;) end  ","version":null,"tagName":"h3"},{"title":"getTargetedBlock(bool, number)​","type":1,"pageTitle":"Player","url":"/globals/Player#gettargetedblockbool-number","content":"Returns a proxy for your currently targeted BlockState This BlockState appears on the F3 screen The bool is for ignoring liquids and the number is the distance in blocks to check Maximum and Default distance is 20, Minimum is -20 Returns a vararg of the block, the hit position and the block face the hit collided if player:getTargetedBlock(true, 4.5).id == &quot;minecraft:grass_block&quot; then log(&quot;You're looking at grass&quot;) end  ","version":null,"tagName":"h3"},{"title":"hasInventory​","type":1,"pageTitle":"Player","url":"/globals/Player#hasinventory","content":"Checks if the entity has an inventory (Horses, Camels, Llamas, ...) ","version":null,"tagName":"h3"},{"title":"hasContainer​","type":1,"pageTitle":"Player","url":"/globals/Player#hascontainer","content":"Checks if the entity has a container (Chest Boats, Minecarts with Chests, ...) ","version":null,"tagName":"h3"},{"title":"isLiving​","type":1,"pageTitle":"Player","url":"/globals/Player#isliving","content":"Gets if this entity is a Living Entity ","version":null,"tagName":"h3"},{"title":"isPlayer​","type":1,"pageTitle":"Player","url":"/globals/Player#isplayer","content":"Gets if this entity is a Player Entity ","version":null,"tagName":"h3"},{"title":"getPermissionLevel​","type":1,"pageTitle":"Player","url":"/globals/Player#getpermissionlevel","content":"Returns the permission level number of this entity Server Operators, by default, have the permission level of 4 ","version":null,"tagName":"h3"},{"title":"Vanilla Settings​","type":1,"pageTitle":"Player","url":"/globals/Player#vanilla-settings","content":"","version":null,"tagName":"h2"},{"title":"getModelType​","type":1,"pageTitle":"Player","url":"/globals/Player#getmodeltype","content":"Returns &quot;SLIM&quot; or &quot;DEFAULT&quot;, depending on the player's model type ","version":null,"tagName":"h3"},{"title":"hasCape​","type":1,"pageTitle":"Player","url":"/globals/Player#hascape","content":"Returns whether the player has a cape loaded ","version":null,"tagName":"h3"},{"title":"hasSkin​","type":1,"pageTitle":"Player","url":"/globals/Player#hasskin","content":"Returns whether the player has a custom skin loaded ","version":null,"tagName":"h3"},{"title":"isSkinLayerVisible​","type":1,"pageTitle":"Player","url":"/globals/Player#isskinlayervisible","content":"Returns whether the specified skin layer, from the Skin Customizations settings, is currently visible ","version":null,"tagName":"h3"},{"title":"Item Functions​","type":1,"pageTitle":"Player","url":"/globals/Player#item-functions","content":"","version":null,"tagName":"h2"},{"title":"getItem(integer)​","type":1,"pageTitle":"Player","url":"/globals/Player#getiteminteger","content":"Gets an ItemStack for the item in the given slot For the player, slots are indexed with 1 as the main hand, 2 as the off hand, and 3,4,5,6 as the 4 armor slots from the boots to the helmet If an invalid slot number is given, this will return nil if player:getItem(5).id == &quot;minecraft:elytra&quot; then log(&quot;You're wearing an elytra&quot;) end  ","version":null,"tagName":"h3"},{"title":"getHeldItem(bool)​","type":1,"pageTitle":"Player","url":"/globals/Player#gethelditembool","content":"Returns an ItemStack representing the item in this entity's main hand If true is passed in for &quot;offhand&quot;, then it will instead look at the item in the entity's offhand If the entity isn't holding an item in that hand, returns air if player:getHeldItem(false).id ~= &quot;minecraft:air&quot; then log(&quot;Item in mainhand&quot;) end if player:getHeldItem(true).id ~= &quot;minecraft:air&quot; then log(&quot;Item in offhand&quot;) end  ","version":null,"tagName":"h3"},{"title":"isUsingItem​","type":1,"pageTitle":"Player","url":"/globals/Player#isusingitem","content":"Returns true if the entity is currently using an item ","version":null,"tagName":"h3"},{"title":"getActiveItem​","type":1,"pageTitle":"Player","url":"/globals/Player#getactiveitem","content":"Returns an ItemStack representing the item the entity is currently using If they're not using any item, returns air ","version":null,"tagName":"h3"},{"title":"getActiveItemTime​","type":1,"pageTitle":"Player","url":"/globals/Player#getactiveitemtime","content":"Returns the ticks this entity's active item has been used for ","version":null,"tagName":"h3"},{"title":"Hand Functions​","type":1,"pageTitle":"Player","url":"/globals/Player#hand-functions","content":"","version":null,"tagName":"h2"},{"title":"isLeftHanded​","type":1,"pageTitle":"Player","url":"/globals/Player#islefthanded","content":"Returns true if the entity's main hand is its left ","version":null,"tagName":"h3"},{"title":"isSwingingArm​","type":1,"pageTitle":"Player","url":"/globals/Player#isswingingarm","content":"Returns true if the entity is currently swinging its arm ","version":null,"tagName":"h3"},{"title":"getSwingDuration​","type":1,"pageTitle":"Player","url":"/globals/Player#getswingduration","content":"Returns the number of ticks this entity will have while swinging its arms ","version":null,"tagName":"h3"},{"title":"getSwingTime​","type":1,"pageTitle":"Player","url":"/globals/Player#getswingtime","content":"Returns the number of ticks this entity has the arm swinging ","version":null,"tagName":"h3"},{"title":"getActiveHand​","type":1,"pageTitle":"Player","url":"/globals/Player#getactivehand","content":"Returns &quot;OFF_HAND&quot; or &quot;MAIN_HAND&quot;, depending on which hand this entity uses an item with ","version":null,"tagName":"h3"},{"title":"getSwingArm​","type":1,"pageTitle":"Player","url":"/globals/Player#getswingarm","content":"Returns &quot;OFF_HAND&quot; or &quot;MAIN_HAND&quot;, based on the arm this entity is currently swinging ","version":null,"tagName":"h3"},{"title":"Miscellaneous​","type":1,"pageTitle":"Player","url":"/globals/Player#miscellaneous","content":"","version":null,"tagName":"h2"},{"title":"getIPAddress​","type":1,"pageTitle":"Player","url":"/globals/Player#getipaddress","content":"Returns this player's IP address ","version":null,"tagName":"h3"},{"title":"getUUID​","type":1,"pageTitle":"Player","url":"/globals/Player#getuuid","content":"Gets the UUID of the proxied entity ","version":null,"tagName":"h3"},{"title":"hasAvatar​","type":1,"pageTitle":"Player","url":"/globals/Player#hasavatar","content":"Returns true if Figura has an avatar loaded for this entity ","version":null,"tagName":"h3"},{"title":"getVariable​","type":1,"pageTitle":"Player","url":"/globals/Player#getvariable","content":"Gets the value of a variable this entity stored in themselves using the Avatar api's store() function ","version":null,"tagName":"h3"},{"title":"How To Read Documentation","type":0,"sectionRef":"#","url":"/tutorials/How-To-Read-Documentation","content":"","keywords":"","version":null},{"title":"The Basics​","type":1,"pageTitle":"How To Read Documentation","url":"/tutorials/How-To-Read-Documentation#the-basics","content":"","version":null,"tagName":"h2"},{"title":"Globals​","type":1,"pageTitle":"How To Read Documentation","url":"/tutorials/How-To-Read-Documentation#globals","content":"Globals are where functions that allow you to access various information are stored. For instance, functions relating to player data are stored in the global player, and functions relating to the avatar's models are stored in the global models. ","version":null,"tagName":"h3"},{"title":"Enums​","type":1,"pageTitle":"How To Read Documentation","url":"/tutorials/How-To-Read-Documentation#enums","content":"Enums are not functions, but rather lists of key words a function may return or take as an argument. For example, the ParentTypes enums contains all the parent types you could set a modelPart to (which are equivalent to the Blockbench keywords). On the other hand, the EntityPoses enums contains all the entity poses (including non-player poses) that an entity can achieve, as returned by getPose() ","version":null,"tagName":"h3"},{"title":"Reading Figs​","type":1,"pageTitle":"How To Read Documentation","url":"/tutorials/How-To-Read-Documentation#reading-figs","content":"This page will be providing a tutorial on how to find and use all of Figura's functions using Figs. We will be viewing Figs in the 'experienced person' mode. By default Figs is in new person mode, to change this you can select the Preferences button in the upper right of the webpage. Upon opening Figs you will be primarily presented the option to select your version, this is the version of Figura you are using. If you select the wrong one you may be missing functions or you may be seeing functions you can't actually use. If you skip selecting a version Figs will be showing you the functions in the latest version of Figura. Regardless of if you select a version or not you will see a list of words on the left of the screen. The ones are the top are globals, and then you can scroll down that sidebar to see miscellaneous types and miscellaneous enums. Figs has a search function which will find any word in the name or description of a function, so if you don't know what global a function is in, you can use the search function to keyword search for it. (For example, if you want to change the camera, search for camera and scroll) Let's say we want to make a custom elytra that turns off/on depending on if we're wearing an elytra. We're a player, so all of our information is going to be in the player API. On the left sidebar scroll down until you find player underneath the globals section. Aside from scrolling through the entire player API list you could search for the word 'item' (as we are looking for item information) until you find getItem() ","version":null,"tagName":"h2"},{"title":"How To Read What's Being Given​","type":1,"pageTitle":"How To Read Documentation","url":"/tutorials/How-To-Read-Documentation#how-to-read-whats-being-given","content":"There's going to be some information there, and all of it is necessary. You can click on PlayerAPI.getItem to open the full page for the function (though this doesn't provide more information) PlayerAPI.getItem tells us that the function getItem is in the PlayerAPI. Functions in the player API are accessed via the player global so the function can be accessed by writing player:getItem() . But it doesn't tell us how to get all the information we want out of it yet. Look down until you see overload 1: this next bit of information is the second piece of the puzzle PlayerAPI:getItem(index: Integer): ItemStack is giving us **four** very important pieces of information, the first two we've already gone over. The third piece of information is what's inside the brackets (). In this case it's index: Integer. In this context, &quot;index&quot; refers to the item slot being checked. An integer is a whole number, so this tells us that the slot to check is determined by putting a whole number in the brackets. Looking back up at the description of the item, Figs tells us slots are indexed with 1 as the main hand, 2 as the off hand, and 3,4,5,6 as the 4 armor slots from the boots to the helmet. In short, the integer we enter as an argument will dictate what slot it will search. Figs says 6 is the helmet and it goes down to the boots, and we want the chestplate slot so 5 is the integer we must give it. At this point we have this: player:getItem(5) and we're going to test that it's working with a bit of code function events.tick() log(player:getItem(5)) end  And... huzzah! Our game chat is being spammed by the log, and that log is telling us what's in our chestplate slot. The game is telling us, at the end of the message, that this is an ItemStack. If you look back at figs' overload: PlayerAPI:getItem(index: Integer): ItemStack you'll notice that 'ItemStack' is after the parenthesis. That's because the information after the colon : is what the function is going to return. Essentially, what it's going to give back to us after it's done. So now we can get information from the chesplate slot, but we're not doing anything with that information yet, we must dive into information given to us via the ItemStack. In Figs, click on ItemStack and it will bring you to another page that has even more functions on it. We want to know if this ItemStack is from an elytra. The best way to do this is via the item's id. If you've ever used the /give command, you give yourself an item via the item ID, and it looks like minecraft:stick or something similar. An item's id can also be viewed by turning advanced tooltips on using F3+H. If you've searched the ItemStack page for id you will easily find the getID() function. Its overload looks like this: ItemStack:getID(): String Like before, getID() is in ItemStack, meaning it wants an ItemStack, but we don't have an ItemStack API like the player API, we can't do ItemStack:getID() because ItemStack is meaningless (it's not in the list of globals). However, player:getItem(5) returns an ItemStack which the getID() function can be used on directly. As such, we can use player:getItem(5):getID() which in our testing log looks like this: function events.tick() log(player:getItem(5):getID()) end  You might be wondering about putting something in getID's parentehsis, so let's turn our attention back to the overload figs gives us. In ItemStack:getID(): String the parenthesis are empty here. That means no arguments are necessary and nothing should be put in the brackets. Anything given will be ignored. Notably, it's returning a String which is quite literally a string of characters. Putting something in quotes makes it a string. So true is a boolean, but &quot;true&quot; is a string. In our case this string of characters is the id of the item in our chestplate slot. At this point we can compare the string of our item with the string of the elytra id. function events.tick() log(player:getItem(5):getID() == &quot;minecraft:elytra&quot;) end  This statement is known as an evaluation. The doubled equals sign == tells the game to compare the two values on either side of it. In the case of functions, it will compare the value the function returns. If an elytra is worn then player:getItem(5):getID() will return &quot;minecraft:elytra, which is equal to what we're checking for and as such the game will show true. The evaluation can be combined with other code to do more with it, such as store its value in a variable or put it in an if statement. So, after all this, our elytra detection is player:getItem(5):getID() == &quot;minecraft:elytra&quot;. It's using the player API to run getItem() on the player, and then use getID() on the player's item, and then compare it's ID to that of the elytra to find out if we're wearing an elytra or not. For clarification: The log is another function that we put the final result into. It serves to make the information we put in it as an argument to the chat. If you copied the log that will break things ","version":null,"tagName":"h3"},{"title":"Using The In-Game Docs​","type":1,"pageTitle":"How To Read Documentation","url":"/tutorials/How-To-Read-Documentation#using-the-in-game-docs","content":"WIP ","version":null,"tagName":"h2"},{"title":"Keybinds","type":0,"sectionRef":"#","url":"/tutorials/Keybinds","content":"","keywords":"","version":null},{"title":"Example Keybind​","type":1,"pageTitle":"Keybinds","url":"/tutorials/Keybinds#example-keybind","content":"First things first, you need to initialize the keybind local exampleKey = keybinds:newKeybind(&quot;Keybind Name&quot;, &quot;key.keyboard.h&quot;)  At this point, the keybind will show up in the avatar's keybind list- accessible via the Figura menu- with the name Keybind Name and assigned to the letter H. But pressing H won't do anything yet. More keybinds ids can be found in the Keybinds: Enums page There are multiple ways to detect keybinds, but the most common is through press and release as they are easiest to ping. If you're not familiar with pings see Pings. Underneath creating the key we will be tying the press of the key to a ping function. It's done underneath as the code is read top-down and the key must exist first. local exampleKey = keybinds:newKeybind(&quot;Keybind Name&quot;, &quot;key.keyboard.h&quot;, false) exampleKey.press = pings.examplePing  This itself won't do anything until we create the function pings.examplePing, this must be done above where press is assigned to the ping function, because the ping function will need to exist before it can be assigned. If it's done beneath nothing will happen. The false at the end decides whether or not the keybind will function while a gui like the inventory is opening. It can be skipped and the value will be considered false. If it's set to true then this keybind will run even while any gui is open or closed. function pings.examplePing() log(&quot;Pressed!&quot;) end local exampleKey = keybinds:newKeybind(&quot;Keybind Name&quot;, &quot;key.keyboard.h&quot;) exampleKey.press = pings.examplePing  And there we have it! Now this keybind will send Pressed! in chat every time H is pressed. At this point you could put whatever lines of code you wish into the ping function and it will be synced. Alternatively, release will run the keybind when the key is released rather than when it is first pressed. ","version":null,"tagName":"h2"},{"title":"Toggling With A Keybind​","type":1,"pageTitle":"Keybinds","url":"/tutorials/Keybinds#toggling-with-a-keybind","content":"This is going to look extremely similar to the last example, but we are going to add in a boolean that we're toggling local keybindState = true -- Here the keybindState is true, meaning the first press will swap it to false -- If you wish the first press to swap to false, change the true to false above function pings.examplePing(state) log(&quot;state is &quot; .. tostring(state)) models:setVisible(state) -- This will toggle the visibility of all or models, add in a model path to turn on/off specific modelParts -- animations.bbmodelName.animationName:setPlaying(not state) -- And this is an example of toggling an animation on/off, I'm using not state here because the first press will set this toggle to false and thusly stop the animation, swapping the boolean value like this will make the first press play it end local exampleKey = keybinds:newKeybind(&quot;Keybind Name&quot;, &quot;key.keyboard.h&quot;) exampleKey.press = function() keybindState = not keybindState -- This not is flipping the boolean value between true and false pings.examplePing(keybindState) end -- This time .press is being tied to a function that is then calling the ping, instead of being 'attached' to it directly.  ","version":null,"tagName":"h2"},{"title":"Detecting When A Key Is Held Down​","type":1,"pageTitle":"Keybinds","url":"/tutorials/Keybinds#detecting-when-a-key-is-held-down","content":"If you have the know-how it is possible to use the isPressed() function to detect when a key is being held down, but it's not recommended, as using press and release in conjunction is far more effective. local keybindState = false -- keybindState is the variable you will be using to keep track of the pressed-ness of the keybind function pings.examplePing(state) keybindState = state -- keybindState is made equivalent to the state sent by press or release for use in other parts of the script end local exampleKey = keybinds:newKeybind(&quot;Keybind Name&quot;, &quot;key.keyboard.h&quot;) exampleKey.press = function() pings.examplePing(true) end -- Here, examplePing is sending the boolean value true to the ping function exampleKey.release = function() pings.examplePing(false) end -- When it's released, the boolean value false will be sent, indicating that the key is no longer being pressed -- This is unnecessary, but can be used to track the state of keybindState so you can see it working, at this point you can use keybindState wherever and however you wish- as long as it's in the same script file function events.tick() log(keybindState) end  ","version":null,"tagName":"h2"},{"title":"Using A Vanilla Keybind​","type":1,"pageTitle":"Keybinds","url":"/tutorials/Keybinds#using-a-vanilla-keybind","content":"If you want to detect a vanilla action like attacking or walking forwards but want it to be compatible in the case that someone bound forward to an arrow key you can directly get the vanilla keybind and use it. There's multiple ways to accomplish this but we'll use the same method as previous examples. local exampleKey = keybinds:newKeybind(&quot;Keybind Name&quot;, keybinds:getVanillaKey(&quot;key.forward&quot;))  This will now detect the forward key regardless of what it's bound to. getVanillaKey() is going to need a key id from a specific list of ids that all correspond to a vanilla keybind. They can be found in the keyIDs enum. ","version":null,"tagName":"h2"},{"title":"ModelPart Indexing","type":0,"sectionRef":"#","url":"/tutorials/ModelPart Indexing","content":"ModelPart Indexing This page describes the process to access any ModelPart from the global ModelPart models Getting a ModelPart A property of all ModelParts is that you can get a child ModelPart of a parent ModelPart by indexing the parent with the child's name. models itself is a ModelPart. All bbmodel files in the avatar act as child ModelParts to models. Everything in the root of a Blockbench project is a child of the bbmodel ModelPart. After that, parenting follows the parent structure as defined in the Blockbench OUTLINER. For example the cube RightArm, model.bbmodel ├─ Head │ ├─ Head │ └─ Head Layer └─ RightArm ├─ RightArm └─ RightArm Layer Would be accessed via models.model.RightArm.RightArm Storing a ModelPart As there is nothing special about indexing straight from models all the time (its just another ModelPart), if a specific ModelPart is used multiple times in a script we can store it in a variable for ease of access. --sets a World parented part to match the player's position and body rotation local worldPart = models.model.World function events.RENDER(delta, context) worldPart:setPos(player:getPos(delta) * 16) worldPart:setRot(0, -player:getBodyYaw(delta) + 180, 0) end BBmodels in subfolders bbmodel files in subfolders are a special case. For them, the folder itself acts as another ModelPart. ├─ subfolderA │ ├─ Pet.bbmodel │ └─ bow.bbmodel └─ subfolderB ├─ model.bbmodel └─ bow.bbmodel The bbmodel Pet.bbmodel would be accessed by models.subfolderA.Pet. ","keywords":"","version":null},{"title":"Sounds","type":0,"sectionRef":"#","url":"/tutorials/Sounds","content":"","keywords":"","version":null},{"title":"Playing A Sound​","type":1,"pageTitle":"Sounds","url":"/tutorials/Sounds#playing-a-sound","content":"The most common way to play a sound is through the playSound function in the sound API. sounds:playSound(soundID, position, volume, pitch, loop)  As you can see this function takes five arguments, the sound ID, the position it will be played, the volume (this dictates how close players need to be to hear the sound, default is 1), its pitch (default is 1), and whether or not it will start playing immediately after it ends (default is false). For Minecraft sounds the sound ID is the internal name of the sound, you can find these on the Minecraft Wiki under the Sound Event column. It will play one of the sounds associated with that ID at random. Example, note that the id is a string because it's in quotes: sounds:playSound(&quot;entity.bat.ambient&quot;, player:getPos())  For this example I'm supplying the player position as the location or else it will play at (0,0,0) in the world itself. Because I left out the volume, pitch, and loop, the default values of 1, 1, and false were filled in by Figura. Meaning, it will play with default pitch, default volume, and it won't loop. Example with the other arguments filled: sounds:playSound(&quot;entity.bat.ambient&quot;, player:getPos(), 5, 3, false)  ","version":null,"tagName":"h2"},{"title":"Custom Sounds​","type":1,"pageTitle":"Sounds","url":"/tutorials/Sounds#custom-sounds","content":"Playing a custom sound is exactly the same as playing a Minecraft sound, except the sound ID is now the name of the sound file. Ex: If your file is horn.ogg then your playSound line would look like this: sounds:playSound(&quot;horn&quot;, player:getPos())  Minecraft will only play specific sound files, namely sounds that are .ogg files. Here's an online OGG converter. You will want to change the audio channels setting to mono and the audio codec to Vorbis because Minecraft likes the Vorbic codec. If your custom sound is stored in a subfolder in the avatar, the subfolder name gets added onto the sound name like this: sounds:playSound(&quot;subfolder.horn&quot;, player:getPos())  ","version":null,"tagName":"h2"},{"title":"Mono vs Stereo Sounds​","type":1,"pageTitle":"Sounds","url":"/tutorials/Sounds#mono-vs-stereo-sounds","content":"The audio channel type determines if the right and left ear will have two separate channels (meaning that the left and right ears can be different) or if they'll have the same channel for both ears. Mono sounds are half the size of stereo when it comes to file size. Mono also acts like your average vanilla sound meaning only people near you will be able to hear the sound. Stereo sounds are much bigger (and sounds are already quite big when it comes to file size) and will play for everyone in the server similarly to activating an end portal. There's no way to get around that other than to swap the audio channels to mono. ","version":null,"tagName":"h3"},{"title":"Alternative Ways To Play Sounds​","type":1,"pageTitle":"Sounds","url":"/tutorials/Sounds#alternative-ways-to-play-sounds","content":"If you want to make a long or looping sound follow your movement you're going to need to use a different method for playing sounds. You have to store a reference to the sound in a variable so you can use it later local wDeath = sounds[&quot;entity.wither.death&quot;]  Now you have the wither death sound available for your use wherever within that local scope. wDeath:play()  Will play the sound, but without a position it will be at (0,0,0) in the world. function events.tick() wDeath:pos(player:getPos()) end  Full example: local wDeath = sounds[&quot;entity.wither.death&quot;] wDeath:play() function events.tick() wDeath:pos(player:getPos()) end  You can alter the volume, pitch, and loop with this method as well. ","version":null,"tagName":"h2"},{"title":"Pings","type":0,"sectionRef":"#","url":"/tutorials/Pings","content":"","keywords":"","version":null},{"title":"General Pings​","type":1,"pageTitle":"Pings","url":"/tutorials/Pings#general-pings","content":"Pings utilize Figura's Backend to sync information with other clients. Pings are functions that when called, triggers all other clients to call the same function for their instance of your avatar. ","version":null,"tagName":"h2"},{"title":"Ping Rate Limiting​","type":1,"pageTitle":"Pings","url":"/tutorials/Pings#ping-rate-limiting","content":"The backend restricts you on how much data you can send over a period of time. The developer given limits are: 1024 bytes per second32 pings per second If either of these are reached, the backend will ignore any comunication from you for some amount of time. ","version":null,"tagName":"h3"},{"title":"Pingable Values​","type":1,"pageTitle":"Pings","url":"/tutorials/Pings#pingable-values","content":"Pings can send most primitive types and some userdata types. All pingable types use a single byte to represent the type of data that is being sent. This byte is not included in the listed byte totals. nil - 0 Bytes - if a type that is not supported is used as a parameter, it will be replaced with nil.boolean - 0 Bytesintegear - 1-4 Bytes - integears only take up as many bytes as it needs. - integears are signed. For example, to only use a single byte the value must be between -128 and 127.double - 8 Bytes - If the number has a decimal at all, or is outside the range of a 4 byte integear, it will be sent as a double.string - 2+n Bytes - strings will always use 2 bytes to store the length. - Ascii characters will be a single byte each. - UTF-8 characters will be multiple bytes per character. - The absolute maximum size of string you can send is 65535 characters. If a larger string is sent, it will be truncated.table - Too Many Bytes - Every key and value is send as data, resulting in high byte costs. - It is recommended to never send a table over pings.VectorN - 1+8\\*N Bytes - Vectors have a single byte that stores the size of the Vector. - Vectors are always assumed to store doubles. If you have a Vector of integears, I recommend sending them as 3 seperate arguments instead.MatrixN - 2+8\\*W\\*H Bytes - Matrices store both the width and height of the matrix, then every value as a double. ","version":null,"tagName":"h3"},{"title":"Ping​","type":1,"pageTitle":"Pings","url":"/tutorials/Pings#ping","content":"Below is an example ping. function pings.pingName(a) print(&quot;Ping&quot;) print(&quot;.&quot;) print(&quot;Data Recieved:&quot;, a) print(&quot;.&quot;) print(&quot;Pong&quot;) end  It accepts a single variable, which it will print to the chat as an example. To call it, just call it like any other lua function. pings.pingName(&quot;This is a string wooooooooooooooooo&quot;)  When you as the host call the ping, the function will execute for all other clients, regardless of their current state. Do note that if a non-host client reaches a line where a ping gets called, it is completely ignored. No data is sent to the backend, and the contents of the ping will not be executed. Ping functions can be passed into functions that expect a function as a parameter, such as Action onToggle. actionVariable:onToggle(pings.pingName)  Remember that we are passing the function itself as a variable. The below would be passing the return result of the ping function, which is nigh guarenteed to be nil as Pings should never return a value. --do not do actionVariable:onToggle(pings.pingName())  ","version":null,"tagName":"h3"},{"title":"Advanced Pings​","type":1,"pageTitle":"Pings","url":"/tutorials/Pings#advanced-pings","content":"Situational techniques that may be handy, depending on the use case. ","version":null,"tagName":"h2"},{"title":"Ping on Init​","type":1,"pageTitle":"Pings","url":"/tutorials/Pings#ping-on-init","content":"Calling a ping function when the script is first loaded is a horrible idea. The ping will only ever execute for other clients when you, the host, load the avatar. Not only that, it may never be executed on other clients, as they might not have your avatar loaded by the time you broadcast the ping. How do we get around this? Well, when you assign a function to an index in the pings table, the Lua Function gets replaced with a Java Function. This happens because of metatables, specifically the __newindex metamethod. Functions cannot be modified, so if we store the function before assing it to the pings table, we can use it like a regular function, and use the same code as a ping function. local function doThing(state) models.modelA:setVisible(state) models.modelB:setVisible(not state) end pings.doThing = doThing -- doThing and pings.doThing are 2 completely seperate values at this point, as the pings table has replaced the index at pings.doThing with a Java Function that wraps the doThing Lua Function. -- &lt;code&gt;doThing==pings.doThing&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; print(doThing, pings.doThing, doThing == pings.doThing) local keybindState = false -- I call the local doThing instead of pings.doThing, as pings.doThing is a function that invokes network code. -- This ensures that the default state is set correctly. If this was a ping function, both models will be visible for other clients until you press the keybind. doThing(keybindState) local keyA = keybinds:newKeybind(&quot;KeybindName&quot;, &quot;key.keyboard.k&quot;) function keyA.press() keybindState = not keybindState -- We still need to call the ping function in the keybind. pings.doThing(keybindState) end  The alternative is to reiterate the models.modelA:setVisible(state) models.modelB:setVisible(not state) part of the ping. For larger pings it will be combersome to rewrite code that is already defined, which is why this technique is useful. ","version":null,"tagName":"h3"},{"title":"Byte Array​","type":1,"pageTitle":"Pings","url":"/tutorials/Pings#byte-array","content":"There are some situations where you will want to send a large amount of raw bytes, and you need to do it efficiently. The most efficient way is to send a string. Asside from the 2 constant bytes for the length, a string will always be 1 byte per ascii character (UTF-8 characters are multiple ascii characters, interpreted as a single character). This makes it very consistent in terms of bytes, making it easy to predict and avoid being rate limited. Below is a basic conversion of a byte array to a string, ready to be pinged and converted back into a byte array on the client's end. function pings.recieveData(str) local byteArray = table.pack(string.byte(str)) printTable(byteArray) end local packet=[] for i=1,20 do table.insert(packet, math.random(0,255)) end local keyA = keybinds:newKeybind(&quot;KeybindName&quot;, &quot;key.keyboard.k&quot;) function keyA.press() local packedString = string.char(table.unpack(packet)) pings.recieveData(packedString) end  ","version":null,"tagName":"h3"},{"title":"ActionWheel","type":0,"sectionRef":"#","url":"/tutorials/ActionWheel","content":"","keywords":"","version":null},{"title":"Example Action Wheel​","type":1,"pageTitle":"ActionWheel","url":"/tutorials/ActionWheel#example-action-wheel","content":"First step is to create the Page that will hold the Actions. This is done via the newPage function. local mainPage = action_wheel:newPage()  This creates a new page, but thats it. If you save and try to open the Action Wheel (Default Keybind B), you will see a message stating that there is no active page. We can use the setPage function while providing a reference to a Page object to set the active page. action_wheel:setPage(mainPage)  Tada. New blank page and Figura isnt screaming at us. Now for some actions. You can call the newAction function on a Page object. This will create a new Action and add it to the Page. You technically do not need to store the Action in a variable. If you do, please give it a unique variable name. Using the same variable name for all actions can cause issues when doing more advanced stuff. local action = mainPage:newAction()  New Action, but it really doesn't look like much. Lets add a title, a display item, and perhaps change the color that appears when the Action is hovered over. One thing to remember is that all Action functions return itself. This allows for functions to be chained together, always modifying the same action local action = mainPage:newAction() :title(&quot;My Action&quot;) :item(&quot;minecraft:stick&quot;) :hoverColor(1, 0, 1)  Pretty, but functionally useless. Lets add a function to the leftClick field. When the Action is left clicked, the function stored in the Action's leftClick field gets invoked. local action = mainPage:newAction() :title(&quot;My Action&quot;) :item(&quot;minecraft:stick&quot;) :hoverColor(1, 0, 1) -- the &lt;code&gt;onLeftClick&lt;/code&gt; function just sets the Action's &lt;code&gt;leftClick&lt;/code&gt; field :onLeftClick(function() print(&quot;Hello World!&quot;) end)  Now we have an Action that does stuff. You may not notice anything, but there is a glaring issue with the current code. The issue is that the leftClick code will only execute on your computer. As described in Pings, Figura is completely clientside. The Action Wheel is a feature added by Figura, meaning it will never be synced between clients via the Minecraft Server. So instead, we must use Pings that utilize Figura's Backend to sync data between clients. First step is to take the code that would be executed on leftClick, and turn it into a ping function. Then, instead of assigning an anonymous function to leftClick, we assign the ping function itself to leftClick IMPORTANT: ALL PING FUNCTIONS MUST HAVE UNIQUE NAMES Also, please name your ping function so that it describes what it does. I hate seeing pings.actionClicked in the hellp channel in discord. Do something like pings.playEmote1 or pings.setArmorVisibility. -- Create ping function that does the same thing the Action would have done. -- It must be defined above the Action. function pings.actionClicked() print(&quot;Hello World!&quot;) end local action = mainPage:newAction() :title(&quot;My Action&quot;) :item(&quot;minecraft:stick&quot;) :hoverColor(1, 0, 1) -- Pass in the ping function itself into &lt;code&gt;onLeftClick&lt;/code&gt; :onLeftClick(pings.actionClicked)  And there you have it. An Action that correctly executes it's contents across all clients. While this will correctly sync the timing of the execution of the ping function with all clients, it needs a slight modification if you want to send arguments with the ping. function pings.actionClicked(a) print(&quot;Hello World!&quot;, a) end local action = mainPage:newAction() :title(&quot;My Action&quot;) :item(&quot;minecraft:stick&quot;) :hoverColor(1, 0, 1) :onLeftClick(function() pings.actionClicked(math.random()) end)  What we are doing is wrapping the call to the ping function inside another function. The code below is a common mistake beginners can fall into. While the code might seem correct to those less code literate, it translates to &quot;call the ping function, then assign the return result to the leftClick field&quot;. A ping will never have a return value, meaning leftClick is being assigned the value nil, meaning nothing. mainPage:newAction() :onLeftClick(pings.actionClicked2(math.random())) -- Do not do use this code. It will not work.  Here is the full copy paste for an example Action Wheel local mainPage = action_wheel:newPage() action_wheel:setPage(mainPage) function pings.actionClicked() print(&quot;Hello World!&quot;) end local action = mainPage:newAction() :title(&quot;My Action&quot;) :item(&quot;minecraft:stick&quot;) :hoverColor(1, 0, 1) :onLeftClick(pings.actionClicked)  ","version":null,"tagName":"h2"},{"title":"Further Reading​","type":1,"pageTitle":"ActionWheel","url":"/tutorials/ActionWheel#further-reading","content":"Go here for more information on Actions, like making your action toggleable. ","version":null,"tagName":"h3"},{"title":"Advanced Action Wheel​","type":1,"pageTitle":"ActionWheel","url":"/tutorials/ActionWheel#advanced-action-wheel","content":"","version":null,"tagName":"h2"},{"title":"Multi Page Setup​","type":1,"pageTitle":"ActionWheel","url":"/tutorials/ActionWheel#multi-page-setup","content":"Creating a network of Pages can be overwhelming. Lets try to rectify that. This method for creating a Page Network divides the Pages into seperate, isolated files. These files return an Action that can be added to a different page. This Action will set the cuurrent page to the page in the file, but it first stores a reference to the Page it came from. That way when you want to go back to the previous page, its as simple as setting the current page to the stored Page. This allows Pages to be modular and easily reorganized if needed. More importantly, it can help make multiple pages less overwhelming. --ActionWheel.lua -- This file controls the root Page. All Pages are 'children' of this Page. local mainpage = action_wheel:newPage() -- &lt;code&gt;setAction&lt;/code&gt; is used to add an Action that already exists to this Page -- You need to specify the slot the Action wil go into, but &lt;code&gt;-1&lt;/code&gt; can be used to put it in the next available slot. mainpage:setAction(-1, require(&quot;Page1&quot;)) mainpage:setAction(-1, require(&quot;Page2&quot;)) action_wheel:setPage(mainpage)  --Page1.lua -- Create the Page local page = action_wheel:newPage() -- Define the Actions within the Page (These are dummy example Actions) page:newAction():title():color():onLeftClick() page:newAction():title():color():onLeftClick() page:newAction():title():color():onLeftClick() -- This variable stores the Page to go back to when done with this Page local prevPage -- This Action just sets the stored page as active page:newAction() :title(&quot;GoBack&quot;) :item(&quot;minecraft:barrier&quot;) :onLeftClick(function() action_wheel:setPage(prevPage) end) -- &lt;code&gt;Page:newAction&lt;/code&gt; automatically adds the Action to the Page. -- This is unwanted, so &lt;code&gt;action_wheel:newAction()&lt;/code&gt; is used so just make an Action. -- This is the Action that will be returned by &lt;code&gt;require&lt;/code&gt; and will be used to navigate to this file's Page return action_wheel:newAction() :title(&quot;Page1&quot;) :onLeftClick(function() -- store the current active page so that we can set it back as active later prevPage = action_wheel:getCurrentPage() -- set this file's page as active action_wheel:setPage(page) end)  --Page2.lua -- Page2 is just to show that the entire process can be repeated verbatum, so long as the variables are &lt;code&gt;local&lt;/code&gt;. local page = action_wheel:newPage() page:newAction():title():color():onLeftClick() page:newAction():title():color():onLeftClick() page:newAction():title():color():onLeftClick() local prevPage page:newAction() :title(&quot;GoBack&quot;) :item(&quot;minecraft:barrier&quot;) :onLeftClick(function() action_wheel:setPage(prevPage) end) return action_wheel:newAction() :title(&quot;Page2&quot;) :onLeftClick(function() prevPage = action_wheel:getCurrentPage() action_wheel:setPage(page) end)  ","version":null,"tagName":"h3"},{"title":"Setting Default State of Toggle Action​","type":1,"pageTitle":"ActionWheel","url":"/tutorials/ActionWheel#setting-default-state-of-toggle-action","content":"This primarily utilizes calling a ping function without the network code, which is explained here This example will correctly set the default visibility of a theoretical jetpack model -- This variable's initial value will control the default state of the togglable thing. local jetpackEnabled = true local jetpackModel = models.model.Body.Jetpack -- reference a ModelPart for convinience local function setJetpack(bool) jetpackEnabled = bool -- this will be a ping function, so we still need to set the client's variable for when it is used in the toggle. jetpackModel:setVisible(bool) end pings.setJetpack = setJetpack -- we now have a normal function and a ping function that calls the normal function after network stuff -- This event controls the particle effect of the jetpack function events.tick() -- once every 4 ticks while the jetpack is visible if jetpackEnabled and world.getTime() % 4 == 0 then -- spawn particles relative to the model itself in the world local partMatrix = jetpackModel:partToWorldMatrix() particles:newParticle(&quot;minecraft:flame&quot;, partMatrix:apply(3, -6, 0)) particles:newParticle(&quot;minecraft:flame&quot;, partMatrix:apply(-3, -6, 0)) end end -- Page boilerplate local mainpage = action_wheel:newAction() action_wheel:setPage(mainpage) -- calling a ping in the script initialization is a bad idea, hence why the reference to the normal function is needed setJetpack(jetpackEnabled) mainpage:newAction() :title(&quot;Enable Jetpack&quot;) :toggleTitle(&quot;Disable Jetpack&quot;) :onToggle(pings.setJetpack) -- use the ping for the action toggle, as that is still needs to be pinged :toggled(jetpackEnabled) -- the &lt;code&gt;toggled&lt;/code&gt; function sets the internal &lt;code&gt;state&lt;/code&gt; of the Toggle Action. It *does not* call &lt;code&gt;toggle&lt;/code&gt; or &lt;code&gt;untoggle&lt;/code&gt;.  ","version":null,"tagName":"h3"},{"title":"Tables","type":0,"sectionRef":"#","url":"/tutorials/Tables","content":"","keywords":"","version":null},{"title":"Initialize Table​","type":1,"pageTitle":"Tables","url":"/tutorials/Tables#initialize-table","content":"A table can be created using curly brackets. local t = {}  ","version":null,"tagName":"h2"},{"title":"Generic Indexing​","type":1,"pageTitle":"Tables","url":"/tutorials/Tables#generic-indexing","content":"table[key] is the way to index a table. You can either get what is currently at that key, or assign a value to that key. There is no limitation to what can be used as keys or values in a table. If you index a table with an unknown key, it will return nil . You can also use variables as a key to index a table using this method. local v = 6 t[2] = &quot;number key, string value&quot; t[&quot;string key, table value&quot;] = {} t[false] = true t[v] = &quot;ree&quot; print(t[2]) --&gt; &quot;number key, string value&quot; print(t[&quot;reeee&quot;]) --&gt; nil print(t[&quot;string key, table value&quot;]) --&gt; table 3be7a8  ","version":null,"tagName":"h2"},{"title":"String Indexing Shorthand​","type":1,"pageTitle":"Tables","url":"/tutorials/Tables#string-indexing-shorthand","content":"If that seems like a lot of work to index by a string, yes it is.  table.key is the shorthand for indexing a table with a string. This has very specific restrictions for what the string can contain. Cannot start with a number (t.2fort will not work. Use [] indexing, or use a different string)Cannot contain spaces, periods, or other special charactersCannot be Lua Keywords (true, false, local, function) t.name = &quot;Katt&quot; t.age = -1 t.gender = t.name t.underscores_are_allowed = true  ","version":null,"tagName":"h2"},{"title":"Object Oriented Method Indexing​","type":1,"pageTitle":"Tables","url":"/tutorials/Tables#object-oriented-method-indexing","content":"There is one more way to index a table. Many of the functions in Figura take in the object that called said function as the first parameter. This is because every object of the same type has the exact same functions. This is done via table:key().  local posA = player:getPos() local posB = player.getPos(player)  ","version":null,"tagName":"h2"},{"title":"Initialize Table with Values​","type":1,"pageTitle":"Tables","url":"/tutorials/Tables#initialize-table-with-values","content":"You can assign values to keys when the table is initialized. Each key-value pair must be separated by a comma (,)  local a = { [false] = 1, [&quot;string with spaces&quot;] = &quot;string&quot;, [v] = { [&quot;a&quot;] = 1, [&quot;b&quot;] = 2, }, -- string shorthand rules still apply. This is equivalent to &lt;code&gt;[&quot;life&quot;] = 42&lt;/code&gt; life = 42, }  If you do not specify an index, the provided values will automatically be assigned a numeric index, starting at 1. This is how arrays are handled in lua, just a table that acts as an array. A table array if you will. Unlike other languages, Lua arrays begin indexing at 1 and functions that take in an array expect the first element at 1. local array = { 42, -- [1] = 42 36, -- [2] = 36 1024, -- [3] = 1024 1, -- [4] = 1 &quot;string&quot;, -- [5] = &quot;string&quot; v, -- [6] = v t -- [7] = t } -- newlines are ignored, as with everything in lua local array2 = { 42, 36, 1024, 1, &quot;string&quot;, v, t }  ","version":null,"tagName":"h2"},{"title":"Iterating Over a Table​","type":1,"pageTitle":"Tables","url":"/tutorials/Tables#iterating-over-a-table","content":"Iterating over a table is simple. You can iterate over every single index using pairs. This will go through every index, but it will be in an undefined order. pairs has 2 values it returns when used in a for loop: the current key, and the current value at that key.  for key, value in pairs(t) do print(key, value) end  If the order of the iteration is important, you can use ipairs, but it only goes over numerical indices. This is what you want to use for table arrays. It starts at index 1, and increments by 1 until the table returns nil. When used in a for loop, ipairs returns the current index and the value at that index.  for index, value in ipairs(array) do print(index, value) end  ","version":null,"tagName":"h2"},{"title":"Length of Table Array​","type":1,"pageTitle":"Tables","url":"/tutorials/Tables#length-of-table-array","content":"You can use the # operator to get the length of a table array. For tables with non-numeric indexes, you have to use pairs and calculate the length yourself, though the &quot;length&quot; of that kind of table isnt really useful. This follows the same rules as ipairs in the way that the table's length is every numeric index until one returns nil. So #{1,2,3,4} will return 4, and #{1,2,nil,4} will return 2. As an example, ipairs is pretty much just this. for index = 1, #array, 1 do print(index, array[index]) end  ","version":null,"tagName":"h2"},{"title":"Manipulating Table Arrays​","type":1,"pageTitle":"Tables","url":"/tutorials/Tables#manipulating-table-arrays","content":"Lua comes built in with ways to manipulate tables. Not all are described here, just the ones that I feel are most important. All of these functions are available via the tables global. ","version":null,"tagName":"h2"},{"title":"table.insert(t, pos, value)​","type":1,"pageTitle":"Tables","url":"/tutorials/Tables#tableinsertt-pos-value","content":"This function can add a value at any index, shifting the other values to account for the added value.  table.insert(array, 1, &quot;e&quot;) will insert &quot;e&quot; at the beggining of the table array , shifting every other value forward one index.  When adding elements to the end of the array, you use the function as table.insert(t, value) . So table.insert(array, &quot;l&quot;) appends &quot;l&quot; to the end of the table array . ","version":null,"tagName":"h3"},{"title":"table.remove(t, pos)​","type":1,"pageTitle":"Tables","url":"/tutorials/Tables#tableremovet-pos","content":"This function can remove a value at any index, shifting the other values to account for the removed value. The value that was removed will be returned by this function as well.  table.remove(array, 1) will remove the value at index 1 from the table, shifting all the values back an index.  pos is optional, with the default value being #t . table.remove(array) will remove the last value in the table. ","version":null,"tagName":"h3"},{"title":"Avatar Metadata","type":0,"sectionRef":"#","url":"/tutorials/Avatar Metadata","content":"","keywords":"","version":null},{"title":"Json Basics​","type":1,"pageTitle":"Avatar Metadata","url":"/tutorials/Avatar Metadata#json-basics","content":"The format that metadata is stored in is JSON. More specifically, a JSON object. It behaves very similar to a Lua table, it just uses different syntax. However, JSON has a very strict syntax and any errors will cause the avatar to fail to load. JSON objects operate on key value pairs. Keys are separated from their values using colons (:), and entries are separated with commas (,). Unlike Lua tables, keys must be strings. { &quot;key&quot;: &quot;value&quot;, &quot;stringKey,numberValue&quot;: 4, &quot;objectValue&quot;: { &quot;key, but of sub object&quot;: &quot;value, but of sub object&quot; }, &quot;arrayWooo&quot;: [1, 2, &quot;stringlol&quot;, {}, &quot;42&quot;] }  ","version":null,"tagName":"h2"},{"title":"Metadata Fields​","type":1,"pageTitle":"Avatar Metadata","url":"/tutorials/Avatar Metadata#metadata-fields","content":"Figura looks for specific keys in this JSON object and does things based on the value. Remember that all of these keys are optional. You only need to define the ones you care about. ","version":null,"tagName":"h2"},{"title":"\"name\" : String​","type":1,"pageTitle":"Avatar Metadata","url":"/tutorials/Avatar Metadata#name--string","content":"The value of this key determines the name of the avatar. This name is showed on the avatar information sidebar on the right of the Wardrobe, but also determines the name used to find the avatar on the left of the Wardrobe. If this key is not present, the name of the folder containing the avatar.json file is used. { &quot;name&quot;: &quot;Katt&quot; }  ","version":null,"tagName":"h3"},{"title":"\"description\" : String​","type":1,"pageTitle":"Avatar Metadata","url":"/tutorials/Avatar Metadata#description--string","content":"The value of this key will appear below the avatar's name in the wardrobe. { &quot;name&quot;: &quot;Katt&quot;, &quot;description&quot;: &quot;Example avatar.json&quot; }  ","version":null,"tagName":"h3"},{"title":"\"authors\" : String[]​","type":1,"pageTitle":"Avatar Metadata","url":"/tutorials/Avatar Metadata#authors--string","content":"The value of this key is an array of strings. An array can contain many different values within itself, and Figura expects these values to be strings. The values are used in the Authors field in the avatar information sidebar. { &quot;name&quot;: &quot;Katt&quot;, &quot;description&quot;: &quot;Example avatar.json&quot;, &quot;authors&quot;: [&quot;@KitCat962&quot;, &quot;KitCat#0962&quot;, &quot;Katakana962&quot;] }  ","version":null,"tagName":"h3"},{"title":"\"author\" : String​","type":1,"pageTitle":"Avatar Metadata","url":"/tutorials/Avatar Metadata#author--string","content":"A place for a single author, should you dislike &quot;authors&quot;. Does the exact same thing as &quot;authors&quot; with only 1 element. If the &quot;authors&quot; key is present, this key is ignored. ","version":null,"tagName":"h3"},{"title":"\"version\" : String​","type":1,"pageTitle":"Avatar Metadata","url":"/tutorials/Avatar Metadata#version--string","content":"A place to define a Semantic Versioning version. You can define the lowest possible Figura version that this avatar will run on. If another client uses a Figura version that is less than the version defined here, a warning badge will appear on your nameplate for them. If they hover over it, it will state that their Figura version is lower than what this avatar was designed to run on. If this key does not exist, Figura will use the version that was used to load the avatar.  { &quot;name&quot;: &quot;Katt&quot;, &quot;description&quot;: &quot;Example avatar.json&quot;, &quot;authors&quot;: [&quot;KitCat962&quot;, &quot;Katakana962&quot;], &quot;version&quot;: &quot;0.1.0&quot; }  ","version":null,"tagName":"h3"},{"title":"\"color\" : String​","type":1,"pageTitle":"Avatar Metadata","url":"/tutorials/Avatar Metadata#color--string","content":"This key defines the color of the Figura mark on your nameplate. It must be a string in the format of a 3 character hex code or a 6 character hex code. For example, both &quot;3ab&quot; and &quot;FF00FF&quot; are valid inputs. If this key does not exist, the color &quot;5AAAFF&quot; will be used. { &quot;name&quot;: &quot;Katt&quot;, &quot;description&quot;: &quot;Example avatar.json&quot;, &quot;authors&quot;: [&quot;@KitCat962&quot;, &quot;KitCat#0962&quot;, &quot;Katakana962&quot;], &quot;version&quot;: &quot;0.1.0&quot;, &quot;color&quot;: &quot;fc5bd9&quot; }  ","version":null,"tagName":"h3"},{"title":"\"autoScripts\" : String[]​","type":1,"pageTitle":"Avatar Metadata","url":"/tutorials/Avatar Metadata#autoscripts--string","content":"By default, every single script file in the avatar will execute in an undefined order. The require function can be used to control when a script is first executed, but some may prefer to define the script order in the metadata. This key is an array of strings that define which scripts run and in which order. Scripts not defined here will not run by default on avatar init, but can still be ran via require. A script is specified via it's file name without the .lua extension. If a script is in a subfolder, that folder must also be defined, with the folder separator being a period (.). Consider the following avatar:  KattExampleAvatar ├─ accessories │ ├─ halo.bbmodel │ └─ ribbon.bbmodel ├─ libs │ ├─ armorAidLib.lua │ ├─ RainbowNameplate.lua │ └─ JsonifyTextLib.lua ├─ avatar.json ├─ player.bbmodel │ ├─ diamond_layer_1 │ └─ diamond_layer_2 ├─ script.lua ├─ skin.png └─ skull.bbmodel To make only RainbowNameplate.lua run on avatar init, the autoScripts would look like  &quot;autoScripts&quot;:[&quot;libs.RainbowNameplate&quot;]  For our example metadata file, we will state that only script.lua will run by default, and the script itself will call require on the library scripts which will &quot;import&quot; them into itself. You may be thinking &quot;whats the point of &quot;autoScripts&quot; if require is objectively better at controlling script load order?&quot;, To which my response would be &quot;I don't know&quot;. But if you give an empty array, then no script will run which can be useful for debugging. { &quot;name&quot;: &quot;Katt&quot;, &quot;description&quot;: &quot;Example avatar.json&quot;, &quot;authors&quot;: [&quot;@KitCat962&quot;, &quot;KitCat#0962&quot;, &quot;Katakana962&quot;], &quot;version&quot;: &quot;0.1.0&quot;, &quot;color&quot;: &quot;fc5bd9&quot;, &quot;autoScripts&quot;: [&quot;script&quot;] }  ","version":null,"tagName":"h3"},{"title":"\"autoAnims\" : String[]​","type":1,"pageTitle":"Avatar Metadata","url":"/tutorials/Avatar Metadata#autoanims--string","content":"This key defines which animations should start playing when the avatar first loads. The string to reference an animation follows the pattern &quot;modelPath.animName&quot;. Consider the following avatar:  KattExampleAvatar ├─ accessories │ ├─ halo.bbmodel │ └─ ribbon.bbmodel ├─ libs │ ├─ armorAidLib.lua │ ├─ RainbowNameplate.lua │ └─ JsonifyTextLib.lua ├─ avatar.json ├─ player.bbmodel │ ├─ diamond_layer_1 │ └─ diamond_layer_2 ├─ script.lua ├─ skin.png └─ skull.bbmodel If we want the animation &quot;idle&quot; in the bbmodel player.bbmodel, we would include the string &quot;player.idle&quot; in the &quot;autoAnims&quot; array. Folder seperation is done with a period (.) instead of slash (/). If we want the animation &quot;spin&quot; in the model halo.bbmodel, we would include the string &quot;accessories.halo.spin&quot; in the &quot;autoAnims&quot; array. This is not table indexing like how you would index the animations table to get an Animation. It is just string concatenation.  autoAnims has a very niche use case as 99% of the time you have animations that you only want playing sometimes or want to play on a trigger. The only real use case is for a constantly playing looping animation that you don't want to waste ~8 instructions on play at the beginning of a script, or perhaps you have an avatar that does not have any script files and you want to keep it that way. { &quot;name&quot;: &quot;Katt&quot;, &quot;description&quot;: &quot;Example avatar.json&quot;, &quot;authors&quot;: [&quot;@KitCat962&quot;, &quot;KitCat#0962&quot;, &quot;Katakana962&quot;], &quot;version&quot;: &quot;0.1.0&quot;, &quot;color&quot;: &quot;fc5bd9&quot;, &quot;autoScripts&quot;: [&quot;script&quot;], &quot;autoAnims&quot;: [&quot;player.idle&quot;, &quot;accessories.halo.spin&quot;] }  ","version":null,"tagName":"h3"},{"title":"\"ignoredTextures\" : String[]​","type":1,"pageTitle":"Avatar Metadata","url":"/tutorials/Avatar Metadata#ignoredtextures--string","content":"This key defines which textures should be ignored when loading the avatar. This is useful for when you have a cube that gets its texture set via code, but since all cubes must have a blockbench texture for Figura to even load the cube, you will either have to waste space with a dummy texture or use another texture in the model, which probably won't look good on the cube. This key allows you to have that dummy texture in blockbench without having to waste precious bytes on having that texture loaded with the avatar. Referencing a texture is exactly the same format as getting a Texture object with the textures global. Consider this avatar:  KattExampleAvatar ├─ accessories │ ├─ halo.bbmodel │ └─ ribbon.bbmodel ├─ libs │ ├─ armorAidLib.lua │ ├─ RainbowNameplate.lua │ └─ JsonifyTextLib.lua ├─ avatar.json ├─ player.bbmodel │ ├─ diamond_layer_1 │ └─ diamond_layer_2 ├─ script.lua ├─ skin.png └─ skull.bbmodel Hypothetically, the armor of this avatar is being handled by armorAidLib.lua. It changes the texture of cubes to the vanilla armor textures. There is no need to have the diamond_layer_1 and diamond_layer_2 textures in the bbmodel, but setting the cubes to use skin.png will make editing the model a pain. So we remove both unused textures. { &quot;name&quot;: &quot;Katt&quot;, &quot;description&quot;: &quot;Example avatar.json&quot;, &quot;authors&quot;: [&quot;@KitCat962&quot;, &quot;KitCat#0962&quot;, &quot;Katakana962&quot;], &quot;version&quot;: &quot;0.1.0&quot;, &quot;color&quot;: &quot;fc5bd9&quot;, &quot;autoScripts&quot;: [&quot;script&quot;], &quot;autoAnims&quot;: [&quot;player.idle&quot;, &quot;accessories.halo.spin&quot;], &quot;ignoredTextures&quot;: [&quot;player.diamond_layer_1&quot;, &quot;player.diamond_layer_2&quot;] }  ","version":null,"tagName":"h3"},{"title":"\"customizations\" : {\"ModelPart\" : {\"Customization\" : \"String\"}}​","type":1,"pageTitle":"Avatar Metadata","url":"/tutorials/Avatar Metadata#customizations--modelpart--customization--string","content":"Does that Type identifier make any sense? Not really, but thats what the &quot;customizations&quot; property is.  &quot;customizations&quot; allows for modifications to ModelParts that cant be done in BlockBench. You can still do this stuff via script, but the intent is for an avatar that does not have a script to still have access to some functionality.  &quot;customizations&quot; itself is a JSON object. The keys of that object are references to ModelParts, with the values being another JSON object. _That_ object contains key value pairs that operate on the referenced ModelPart.  Consider the following avatar:  KattExampleAvatar ├─ accessories │ └─ ribbon.bbmodel │ └─ cube ├─ avatar.json └─ player.bbmodel └─ Head └─ Head To target the Head, the correct key to use would be &quot;player.Head&quot;. To target the ribbon, the correct key to use would be &quot;accessories.ribbon&quot;.  { &quot;customizations&quot;: { &quot;player.Head&quot;: {}, &quot;accessories.ribbon&quot;: {} } }  Now for the keys that work inside these sub-objects. &quot;primaryRenderType&quot; : String​ Sets the RenderType to use for the Primary/Default texture. The default primaryRenderType is &quot;TRANSLUCENT&quot;. { &quot;customizations&quot;: { &quot;player.Head&quot;: {}, &quot;accessories.ribbon&quot;: { &quot;primaryRenderType&quot;: &quot;END_PORTAL&quot; } } }  &quot;secondaryRenderType&quot; : String​ Sets the RenderType to use for the Secondary/Emissive/_e texture. The default secondaryRenderType is &quot;EMISSIVE&quot;. { &quot;customizations&quot;: { &quot;player.Head&quot;: { &quot;secondaryRenderType&quot;: &quot;GLINT&quot; }, &quot;accessories.ribbon&quot;: { &quot;primaryRenderType&quot;: &quot;END_PORTAL&quot; } } }  &quot;parentType&quot; : String​ Keywords in BlockBench set the ParentType of the ModelPart. This key overrides that, or sets one if there is no Keyword. The default ParentType is &quot;None&quot; { &quot;customizations&quot;: { &quot;player.Head&quot;: { &quot;secondaryRenderType&quot;: &quot;GLINT&quot;, &quot;parentType&quot;: &quot;Body&quot; }, &quot;accessories.ribbon&quot;: { &quot;primaryRenderType&quot;: &quot;END_PORTAL&quot; } } }  &quot;moveTo&quot; : String​ Forces the ModelPart reference given to be a child of this ModelPart. This is useful if you like to organize your avatar into separate bbmodels. You can use this to stitch them together. { &quot;customizations&quot;: { &quot;player.Head&quot;: { &quot;secondaryRenderType&quot;: &quot;GLINT&quot;, &quot;parentType&quot;: &quot;Body&quot; }, &quot;accessories.ribbon&quot;: { &quot;primaryRenderType&quot;: &quot;END_PORTAL&quot;, &quot;moveTo&quot;: &quot;player.Head&quot; } } }  &quot;visible&quot; : Boolean​ Overrides the visibility defined in BlockBench. Useful to be able to hide ModelParts in BlockBench to edit the model more easily, without it affecting the final result of the Avatar. { &quot;customizations&quot;: { &quot;player.Head&quot;: { &quot;secondaryRenderType&quot;: &quot;GLINT&quot;, &quot;parentType&quot;: &quot;Body&quot; }, &quot;accessories.ribbon&quot;: { &quot;primaryRenderType&quot;: &quot;END_PORTAL&quot;, &quot;moveTo&quot;: &quot;player.Head&quot;, &quot;visible&quot;: true } } }  &quot;remove&quot; : Boolean​ This customization will prevent the targeted ModelPart from loading at all.  { &quot;customizations&quot;: { &quot;accessories.exampleMesh&quot;: { &quot;smooth&quot;: true } } }  &quot;smooth&quot; : Boolean​ This customization must be applied directly to a mesh object. This will calculate the vertex normals so that the mesh appears smooth, reducing the visibility of individual triangles. { &quot;customizations&quot;: { &quot;accessories.exampleMesh&quot;: { &quot;smooth&quot;: true } } }  ","version":null,"tagName":"h3"},{"title":"Final Example avatar.json​","type":1,"pageTitle":"Avatar Metadata","url":"/tutorials/Avatar Metadata#final-example-avatarjson","content":"{ &quot;name&quot;: &quot;Katt&quot;, &quot;description&quot;: &quot;Example avatar.json&quot;, &quot;authors&quot;: [&quot;@KitCat962&quot;, &quot;KitCat#0962&quot;, &quot;Katakana962&quot;], &quot;version&quot;: &quot;0.1.0&quot;, &quot;color&quot;: &quot;fc5bd9&quot;, &quot;autoScripts&quot;: [&quot;script&quot;], &quot;autoAnims&quot;: [&quot;player.idle&quot;, &quot;accessories.halo.spin&quot;], &quot;ignoredTextures&quot;: [&quot;player.diamond_layer_1&quot;, &quot;player.diamond_layer_2&quot;], &quot;customizations&quot;: { &quot;player.Head&quot;: { &quot;secondaryRenderType&quot;: &quot;GLINT&quot;, &quot;parentType&quot;: &quot;Body&quot; }, &quot;accessories.ribbon&quot;: { &quot;primaryRenderType&quot;: &quot;END_PORTAL&quot;, &quot;moveTo&quot;: &quot;player.Head&quot;, &quot;visible&quot;: true } } }  ","version":null,"tagName":"h2"}],"options":{"disableVersioning":true,"id":"default"}}