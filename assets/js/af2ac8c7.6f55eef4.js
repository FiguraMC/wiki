"use strict";(self.webpackChunkfigurawiki=self.webpackChunkfigurawiki||[]).push([[174],{3905:(e,t,l)=>{l.d(t,{Zo:()=>d,kt:()=>h});var n=l(7294);function i(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function r(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function o(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?r(Object(l),!0).forEach((function(t){i(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):r(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function a(e,t){if(null==e)return{};var l,n,i=function(e,t){if(null==e)return{};var l,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)l=r[n],t.indexOf(l)>=0||(i[l]=e[l]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)l=r[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(i[l]=e[l])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),l=t;return e&&(l="function"==typeof e?e(t):o(o({},t),e)),l},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},v=n.forwardRef((function(e,t){var l=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),g=c(l),v=i,h=g["".concat(s,".").concat(v)]||g[v]||u[v]||r;return l?n.createElement(h,o(o({ref:t},d),{},{components:l})):n.createElement(h,o({ref:t},d))}));function h(e,t){var l=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=l.length,o=new Array(r);o[0]=v;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[g]="string"==typeof e?e:i,o[1]=a;for(var c=2;c<r;c++)o[c]=l[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,l)}v.displayName="MDXCreateElement"},7954:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var n=l(7462),i=(l(7294),l(3905));const r={},o=void 0,a={unversionedId:"globals/World",id:"globals/World",title:"World",description:"The world API is accessed through the world global. Like so) like most other APIS.",source:"@site/docs/globals/World.md",sourceDirName:"globals",slug:"/globals/World",permalink:"/globals/World",draft:!1,editUrl:"https://github.com/figuramc/wiki/tree/main/docs/globals/World.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Renderer",permalink:"/globals/Renderer"},next:{title:"Enums",permalink:"/category/enums"}},s={},c=[{value:"exists",id:"exists",level:3},{value:"getPlayers",id:"getplayers",level:3},{value:"getTime",id:"gettime",level:3},{value:"getTimeOfDay",id:"gettimeofday",level:3},{value:"getMoonPhase",id:"getmoonphase",level:3},{value:"getDimension",id:"getdimension",level:3},{value:"getBiome(vec3)",id:"getbiomevec3",level:3},{value:"getEntity(string)",id:"getentitystring",level:3},{value:"getBlockState(vec3)",id:"getblockstatevec3",level:3},{value:"getStrongRedstonePower(vec3)",id:"getstrongredstonepowervec3",level:3},{value:"getRedstonePower(vec3)",id:"getredstonepowervec3",level:3},{value:"getSkyLightLevel(vec3)",id:"getskylightlevelvec3",level:3},{value:"getBlockLightLevel(vec3)",id:"getblocklightlevelvec3",level:3},{value:"getLightLevel(vec3)",id:"getlightlevelvec3",level:3},{value:"isOpenSky(vec3)",id:"isopenskyvec3",level:3},{value:"getRainGradient(delta)",id:"getraingradientdelta",level:3},{value:"isThundering",id:"isthundering",level:3},{value:"getBuildHeight",id:"getbuildheight",level:3},{value:"getSpawnPoint",id:"getspawnpoint",level:3},{value:"getBlocks(vec3,vec3)",id:"getblocksvec3vec3",level:3},{value:"newItem(string,integer,integer)",id:"newitemstringintegerinteger",level:3},{value:"newBlock(string,vec3)",id:"newblockstringvec3",level:3},{value:"avatarVars",id:"avatarvars",level:3}],d={toc:c},g="wrapper";function u(e){let{components:t,...l}=e;return(0,i.kt)(g,(0,n.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The world API is accessed through the ",(0,i.kt)("code",null,"world")," global. Like so: ",(0,i.kt)("code",null,"world.getTime()"),". Note how the world API uses a period (.) instead of a colon (:) like most other APIS."),(0,i.kt)("h3",{id:"exists"},"exists"),(0,i.kt)("p",null,"Checks whether or not a world currently exists"),(0,i.kt)("p",null,"This will almost always be true, but might be false on some occasions such as while traveling between dimensions"),(0,i.kt)("h3",{id:"getplayers"},"getPlayers"),(0,i.kt)("p",null,"Returns a table containing instances of Player for all players in the world"),(0,i.kt)("p",null,"The players are indexed by their names"),(0,i.kt)("h3",{id:"gettime"},"getTime"),(0,i.kt)("p",null,"Gets the current game time of the world"),(0,i.kt)("p",null,"If delta is passed in, then it adds delta to the time"),(0,i.kt)("p",null,"The default value of delta is zero"),(0,i.kt)("h3",{id:"gettimeofday"},"getTimeOfDay"),(0,i.kt)("p",null,"Gets the current day time of the world"),(0,i.kt)("p",null,"If delta is passed in, then it adds delta to the time"),(0,i.kt)("p",null,"The default value of delta is zero"),(0,i.kt)("h3",{id:"getmoonphase"},"getMoonPhase"),(0,i.kt)("p",null,"Gets the current moon phase of the world, stored as an integer"),(0,i.kt)("h3",{id:"getdimension"},"getDimension"),(0,i.kt)("p",null,"Gets the dimension name of this world"),(0,i.kt)("h3",{id:"getbiomevec3"},"getBiome(vec3)"),(0,i.kt)("p",null,"Gets the Biome located at the given position"),(0,i.kt)("h3",{id:"getentitystring"},"getEntity(string)"),(0,i.kt)("p",null,"Returns an EntityAPI object from this UUID's entity, or nil if no entity was found"),(0,i.kt)("h3",{id:"getblockstatevec3"},"getBlockState(vec3)"),(0,i.kt)("p",null,"Gets the BlockState of the block at the given position"),(0,i.kt)("h3",{id:"getstrongredstonepowervec3"},"getStrongRedstonePower(vec3)"),(0,i.kt)("p",null,"Gets the direct redstone power level of the block at the given position"),(0,i.kt)("h3",{id:"getredstonepowervec3"},"getRedstonePower(vec3)"),(0,i.kt)("p",null,"Gets the redstone power level of the block at the given position"),(0,i.kt)("h3",{id:"getskylightlevelvec3"},"getSkyLightLevel(vec3)"),(0,i.kt)("p",null,"Gets the sky light level of the block at the given position"),(0,i.kt)("h3",{id:"getblocklightlevelvec3"},"getBlockLightLevel(vec3)"),(0,i.kt)("p",null,"Gets the block light level of the block at the given position"),(0,i.kt)("h3",{id:"getlightlevelvec3"},"getLightLevel(vec3)"),(0,i.kt)("p",null,"Gets the overall light level of the block at the given position"),(0,i.kt)("h3",{id:"isopenskyvec3"},"isOpenSky(vec3)"),(0,i.kt)("p",null,"Gets whether or not the sky is open at the given position"),(0,i.kt)("h3",{id:"getraingradientdelta"},"getRainGradient(delta)"),(0,i.kt)("p",null,"Gets the current rain gradient in the world, interpolated from the previous tick to the current one"),(0,i.kt)("p",null,"The default value of delta is 1, which is the current tick"),(0,i.kt)("h3",{id:"isthundering"},"isThundering"),(0,i.kt)("p",null,"Gets whether or not there is currently thunder/lightning happening in the world"),(0,i.kt)("h3",{id:"getbuildheight"},"getBuildHeight"),(0,i.kt)("p",null,"Returns the minimum and maximum build height of the world, as varargs"),(0,i.kt)("h3",{id:"getspawnpoint"},"getSpawnPoint"),(0,i.kt)("p",null,"Returns a vector with the coordinates of the world spawn"),(0,i.kt)("h3",{id:"getblocksvec3vec3"},"getBlocks(vec3,vec3)"),(0,i.kt)("p",null,"Gets a list of all BlockStates in the specified area"),(0,i.kt)("p",null,"The maximum area size is 8 x 8 x 8"),(0,i.kt)("h3",{id:"newitemstringintegerinteger"},"newItem(string,integer,integer)"),(0,i.kt)("p",null,"Parses and create a new ItemStack from the given string"),(0,i.kt)("p",null,"A count and damage can be given, to be applied on this itemstack"),(0,i.kt)("h3",{id:"newblockstringvec3"},"newBlock(string,vec3)"),(0,i.kt)("p",null,"Parses and create a new BlockState from the given string"),(0,i.kt)("p",null,"A world position can be optionally given for the blockstate functions that relies on its position"),(0,i.kt)("h3",{id:"avatarvars"},"avatarVars"),(0,i.kt)("p",null,'Returns a table containing variables stored from all loaded Avatars "avatar:store()" function\nThe table will be indexed by the avatar\'s owner UUID'))}u.isMDXComponent=!0}}]);