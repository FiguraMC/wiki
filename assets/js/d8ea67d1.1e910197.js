"use strict";(self.webpackChunkfigurawiki=self.webpackChunkfigurawiki||[]).push([[852],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>m});var l=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,l)}return i}function n(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,l,a=function(e,t){if(null==e)return{};var i,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)i=r[l],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)i=r[l],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=l.createContext({}),c=function(e){var t=l.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):n(n({},t),e)),i},p=function(e){var t=c(e.components);return l.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},h=l.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(i),h=a,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||r;return i?l.createElement(m,n(n({ref:t},p),{},{components:i})):l.createElement(m,n({ref:t},p))}));function m(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,n=new Array(r);n[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,n[1]=o;for(var c=2;c<r;c++)n[c]=i[c];return l.createElement.apply(null,n)}return l.createElement.apply(null,i)}h.displayName="MDXCreateElement"},4675:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>n,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var l=i(7462),a=(i(7294),i(3905));const r={},n=void 0,o={unversionedId:"tutorials/Particles",id:"tutorials/Particles",title:"Particles",description:"Using the particle API you can spawn particles from Minecraft. These work similarly to the /particle command in-game. For particles with special properties like dust, they are placed in the name.",source:"@site/docs/tutorials/Particles.md",sourceDirName:"tutorials",slug:"/tutorials/Particles",permalink:"/tutorials/Particles",draft:!1,editUrl:"https://github.com/figuramc/wiki/tree/main/docs/tutorials/Particles.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ModelPart Indexing",permalink:"/tutorials/ModelPart Indexing"},next:{title:"Pings",permalink:"/tutorials/Pings"}},s={},c=[{value:"Spawning Particles",id:"spawning-particles",level:2},{value:"Spawning At A Part Location",id:"spawning-at-a-part-location",level:2},{value:"An Alternative Method",id:"an-alternative-method",level:2},{value:"spawn",id:"spawn",level:3},{value:"isAlive",id:"isalive",level:3},{value:"setPos(vec3)",id:"setposvec3",level:3},{value:"getPos",id:"getpos",level:3},{value:"setColor(vec3 or vec4)",id:"setcolorvec3-or-vec4",level:3},{value:"getColor",id:"getcolor",level:3},{value:"setScale(vec3)",id:"setscalevec3",level:3},{value:"getScale",id:"getscale",level:3},{value:"setVelocity(vec3)",id:"setvelocityvec3",level:3},{value:"getVelocity",id:"getvelocity",level:3},{value:"setLifetime(integer)",id:"setlifetimeinteger",level:3},{value:"getLifetime",id:"getlifetime",level:3},{value:"setGravity(number)",id:"setgravitynumber",level:3},{value:"getGravity",id:"getgravity",level:3},{value:"setPower",id:"setpower",level:3},{value:"getPower",id:"getpower",level:3},{value:"setPhysics(bool)",id:"setphysicsbool",level:3},{value:"hasPhysics",id:"hasphysics",level:3},{value:"setSize(number)",id:"setsizenumber",level:3},{value:"getSize",id:"getsize",level:3},{value:"Community Resources",id:"community-resources",level:2},{value:"Confetti by Manuel",id:"confetti-by-manuel",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...i}=e;return(0,a.kt)(u,(0,l.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Using the particle API you can spawn particles from Minecraft. These work similarly to the ",(0,a.kt)("code",null,"/particle")," command in-game. For particles with special properties like dust, they are placed in the name."),(0,a.kt)("p",null,"Most of the article assumes you know to avoid calling the player in init."),(0,a.kt)("h2",{id:"spawning-particles"},"Spawning Particles"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"particles:newParticle(particleID,position,velocity)\n")),(0,a.kt)("p",null,"If you're looking on the ",(0,a.kt)("a",{parentName:"p",href:"https://minecraft.fandom.com/wiki/Particles"},"Minecraft wiki")," then the particle id is the name under the 'Java Edition ID Name' column. Or, it's the same id used by the /particle command. If you're using Minecraft particles you can exclude the Minecraft \"mod name\"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'particles:newParticle("minecraft:explosion",player:getPos())\n')),(0,a.kt)("p",null,"I've added the player position, but excluded the velocity."),(0,a.kt)("p",null,"Dust example, it's color is included in its name:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'particles:newParticle("dust 0 1 1 1",player:getPos())\n')),(0,a.kt)("p",null,"This will spawn an aqua dust particle as the color values need a number between 0 and 1, the fourth number is the alpha. I excluded the 'minecraft:' mod name to demonstrate that it's unnecessary."),(0,a.kt)("h2",{id:"spawning-at-a-part-location"},"Spawning At A Part Location"),(0,a.kt)("p",null,"To spawn a particle at a modelPart's position you'll need to get the position matrix of that part, and insert it into the position like normal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'particles:newParticle("explosion",modelPart:partToWorldMatrix():apply())\n')),(0,a.kt)("p",null,"Where ",(0,a.kt)("code",null,"modelPart")," is a reference to a real modelPart in your avatar."),(0,a.kt)("h2",{id:"an-alternative-method"},"An Alternative Method"),(0,a.kt)("p",null,"You can store a reference to a specific particle, and then use it later to change its properties wile it still exists in the world."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local boom = particles["explosion"]\n\nfunction events.entity_init()\n    boom:spawn():setPos(player:getPos())\nend\n')),(0,a.kt)("p",null,"It's in an entity_init event to protect from an entity init error"),(0,a.kt)("h3",{id:"spawn"},"spawn"),(0,a.kt)("p",null,"Spawns the particle with its current properties (set with the other functions)"),(0,a.kt)("h3",{id:"isalive"},"isAlive"),(0,a.kt)("p",null,"Gets if the particle is still in the world"),(0,a.kt)("h3",{id:"setposvec3"},"setPos(vec3)"),(0,a.kt)("p",null,"Sets the position of the particle"),(0,a.kt)("h3",{id:"getpos"},"getPos"),(0,a.kt)("p",null,"Gets the position of the particle"),(0,a.kt)("h3",{id:"setcolorvec3-or-vec4"},"setColor(vec3 or vec4)"),(0,a.kt)("p",null,"Sets the particle color, most particles don't support it. The alpha value can be excluded"),(0,a.kt)("h3",{id:"getcolor"},"getColor"),(0,a.kt)("p",null,"Gets the color as set by setcolor"),(0,a.kt)("h3",{id:"setscalevec3"},"setScale(vec3)"),(0,a.kt)("p",null,"Sets the scale of the particle"),(0,a.kt)("h3",{id:"getscale"},"getScale"),(0,a.kt)("p",null,"Gets the scale of the particle"),(0,a.kt)("h3",{id:"setvelocityvec3"},"setVelocity(vec3)"),(0,a.kt)("p",null,"Sets the velocity of the particle"),(0,a.kt)("h3",{id:"getvelocity"},"getVelocity"),(0,a.kt)("p",null,"Gets the velocity of the particle"),(0,a.kt)("h3",{id:"setlifetimeinteger"},"setLifetime(integer)"),(0,a.kt)("p",null,"Sets how long the particle should stay in the world. Particles with animations will animate in relation to their life left, so longer lives will make the animation play slower."),(0,a.kt)("h3",{id:"getlifetime"},"getLifetime"),(0,a.kt)("p",null,"Gets the lifetime"),(0,a.kt)("h3",{id:"setgravitynumber"},"setGravity(number)"),(0,a.kt)("p",null,"Sets the strength of gravity"),(0,a.kt)("h3",{id:"getgravity"},"getGravity"),(0,a.kt)("p",null,"Gets the gravity value"),(0,a.kt)("h3",{id:"setpower"},"setPower"),(0,a.kt)("p",null,"I honestly don't know what this does at time of writing"),(0,a.kt)("h3",{id:"getpower"},"getPower"),(0,a.kt)("p",null,"Gets the power"),(0,a.kt)("h3",{id:"setphysicsbool"},"setPhysics(bool)"),(0,a.kt)("p",null,"Sets if the particle will experience physics"),(0,a.kt)("h3",{id:"hasphysics"},"hasPhysics"),(0,a.kt)("p",null,"Gets if the particle has physics"),(0,a.kt)("h3",{id:"setsizenumber"},"setSize(number)"),(0,a.kt)("p",null,"Sets the scale of the particle, identical to setScale"),(0,a.kt)("h3",{id:"getsize"},"getSize"),(0,a.kt)("p",null,"Gets the size of the particle"),(0,a.kt)("h2",{id:"community-resources"},"Community Resources"),(0,a.kt)("h3",{id:"confetti-by-manuel"},"Confetti by Manuel"),(0,a.kt)("p",null,"Spawns custom particles that you make in Blockbench. ",(0,a.kt)("a",{parentName:"p",href:"https://discord.com/channels/1129805506354085959/1132326640718970990"},"Find here in the Discord.")))}d.isMDXComponent=!0}}]);