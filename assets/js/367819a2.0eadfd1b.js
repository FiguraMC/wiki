"use strict";(self.webpackChunkfigurawiki=self.webpackChunkfigurawiki||[]).push([[679],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>c});var n=i(7294);function l(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){l(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,l=function(e,t){if(null==e)return{};var i,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(l[i]=e[i]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(l[i]=e[i])}return l}var o=n.createContext({}),u=function(e){var t=n.useContext(o),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},d=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},h="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var i=e.components,l=e.mdxType,a=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=u(i),p=l,c=h["".concat(o,".").concat(p)]||h[p]||g[p]||a;return i?n.createElement(c,r(r({ref:t},d),{},{components:i})):n.createElement(c,r({ref:t},d))}));function c(e,t){var i=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=i.length,r=new Array(a);r[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[h]="string"==typeof e?e:l,r[1]=s;for(var u=2;u<a;u++)r[u]=i[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}p.displayName="MDXCreateElement"},6344:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=i(7462),l=(i(7294),i(3905));const a={},r=void 0,s={unversionedId:"globals/Player",id:"globals/Player",title:"Player",description:"The player API is accessed through the player global. Like soisGliding()",source:"@site/docs/globals/Player.md",sourceDirName:"globals",slug:"/globals/Player",permalink:"/globals/Player",draft:!1,editUrl:"https://github.com/figuramc/wiki/tree/main/docs/globals/Player.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Nameplate",permalink:"/globals/Nameplate"},next:{title:"Renderer",permalink:"/globals/Renderer"}},o={},u=[{value:"Player Transformations",id:"player-transformations",level:2},{value:"getPos",id:"getpos",level:3},{value:"getRot",id:"getrot",level:3},{value:"getBodyYaw",id:"getbodyyaw",level:3},{value:"getLookDir",id:"getlookdir",level:3},{value:"getVelocity",id:"getvelocity",level:3},{value:"Player Actions",id:"player-actions",level:2},{value:"getPose",id:"getpose",level:3},{value:"isCrouching",id:"iscrouching",level:3},{value:"isGliding",id:"isgliding",level:3},{value:"isFishing",id:"isfishing",level:3},{value:"isBlocking",id:"isblocking",level:3},{value:"isVisuallySwimming",id:"isvisuallyswimming",level:3},{value:"isClimbing",id:"isclimbing",level:3},{value:"isSneaking",id:"issneaking",level:3},{value:"isSprinting",id:"issprinting",level:3},{value:"riptideSpinning",id:"riptidespinning",level:3},{value:"Player Data",id:"player-data",level:2},{value:"isLoaded",id:"isloaded",level:3},{value:"getNbt",id:"getnbt",level:3},{value:"getChargedAttackDelay",id:"getchargedattackdelay",level:3},{value:"getExperienceProgress",id:"getexperienceprogress",level:3},{value:"getExperienceLevel",id:"getexperiencelevel",level:3},{value:"getShoulderEntity",id:"getshoulderentity",level:3},{value:"getTeamInfo",id:"getteaminfo",level:3},{value:"getFood",id:"getfood",level:3},{value:"getGamemode",id:"getgamemode",level:3},{value:"getSaturation",id:"getsaturation",level:3},{value:"getExhaustion",id:"getexhaustion",level:3},{value:"getAbsorptionAmount",id:"getabsorptionamount",level:3},{value:"getArmor",id:"getarmor",level:3},{value:"getMaxHealth",id:"getmaxhealth",level:3},{value:"getHealth",id:"gethealth",level:3},{value:"getDeathTime",id:"getdeathtime",level:3},{value:"getStingerCount",id:"getstingercount",level:3},{value:"getArrowCount",id:"getarrowcount",level:3},{value:"getEntityCategory",id:"getentitycategory",level:3},{value:"isSensitiveToWater",id:"issensitivetowater",level:3},{value:"getName",id:"getname",level:3},{value:"isAlive",id:"isalive",level:3},{value:"getType",id:"gettype",level:3},{value:"getControlledVehicle",id:"getcontrolledvehicle",level:3},{value:"getControllingPassenger",id:"getcontrollingpassenger",level:3},{value:"getPassengers",id:"getpassengers",level:3},{value:"getFrozenTicks",id:"getfrozenticks",level:3},{value:"getMaxAir",id:"getmaxair",level:3},{value:"getDimensionName",id:"getdimensionname",level:3},{value:"isUnderwater",id:"isunderwater",level:3},{value:"isInWater",id:"isinwater",level:3},{value:"isInRain",id:"isinrain",level:3},{value:"isWet",id:"iswet",level:3},{value:"isInLava",id:"isinlava",level:3},{value:"isOnFire",id:"isonfire",level:3},{value:"isInvisible",id:"isinvisible",level:3},{value:"getVehicle",id:"getvehicle",level:3},{value:"isSilent",id:"issilent",level:3},{value:"isGlowing",id:"isglowing",level:3},{value:"getBoundingBox",id:"getboundingbox",level:3},{value:"isOnGround",id:"isonground",level:3},{value:"getEyeY",id:"geteyey",level:3},{value:"getEyeHeight",id:"geteyeheight",level:3},{value:"getTargetedEntity(number)",id:"gettargetedentitynumber",level:3},{value:"getTargetedBlock(bool, number)",id:"gettargetedblockbool-number",level:3},{value:"hasInventory",id:"hasinventory",level:3},{value:"hasContainer",id:"hascontainer",level:3},{value:"isLiving",id:"isliving",level:3},{value:"isPlayer",id:"isplayer",level:3},{value:"getPermissionLevel",id:"getpermissionlevel",level:3},{value:"Vanilla Settings",id:"vanilla-settings",level:2},{value:"getModelType",id:"getmodeltype",level:3},{value:"hasCape",id:"hascape",level:3},{value:"hasSkin",id:"hasskin",level:3},{value:"isSkinLayerVisible",id:"isskinlayervisible",level:3},{value:"Item Functions",id:"item-functions",level:2},{value:"getItem(integer)",id:"getiteminteger",level:3},{value:"getHeldItem(bool)",id:"gethelditembool",level:3},{value:"isUsingItem",id:"isusingitem",level:3},{value:"getActiveItem",id:"getactiveitem",level:3},{value:"getActiveItemTime",id:"getactiveitemtime",level:3},{value:"Hand Functions",id:"hand-functions",level:2},{value:"isLeftHanded",id:"islefthanded",level:3},{value:"isSwingingArm",id:"isswingingarm",level:3},{value:"getSwingDuration",id:"getswingduration",level:3},{value:"getSwingTime",id:"getswingtime",level:3},{value:"getActiveHand",id:"getactivehand",level:3},{value:"getSwingArm",id:"getswingarm",level:3},{value:"Miscellaneous",id:"miscellaneous",level:2},{value:"getIPAddress",id:"getipaddress",level:3},{value:"getUUID",id:"getuuid",level:3},{value:"hasAvatar",id:"hasavatar",level:3},{value:"getVariable",id:"getvariable",level:3}],d={toc:u},h="wrapper";function g(e){let{components:t,...i}=e;return(0,l.kt)(h,(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The player API is accessed through the ",(0,l.kt)("code",null,"player")," global. Like so: ",(0,l.kt)("code",null,"player:isGliding()")),(0,l.kt)("p",null,"Player information that isn't synced between clients is kept in the host API. Examples of unsynced data are: Creative flying, status effects, and remaining air amount."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"Note:")),' There are times during a script\'s functioning where the script will run, but the player global will be empty. This will cause the "Tried to access the EntityAPI before its initialization" error. To solve this, move the player API call into a protected event. If you wish to initialize a check during the initialization phase of a script (outside of any other event) you can use the ',(0,l.kt)("code",null,"entity_init")," event."),(0,l.kt)("p",null,"For most other circumstances you will want the ",(0,l.kt)("code",null,"tick")," event, as checks like ",(0,l.kt)("code",null,"player:isGliding()")," will be updated once a game tick inside that event. (There are 20 ticks in a second, and this is how often Minecraft updates information- some player functions work better in a tick event for this reason)."),(0,l.kt)("p",null,"All provided examples assume you're using a tick event."),(0,l.kt)("p",null,"To reiterate:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"player:isGliding() -- will error\n\nfunction events.entity_init()\n    player:isGliding() -- will not error, but will only play once\nend\n\nplayer:isGliding() -- will error\n\nfunction events.tick()\n    player:isGliding() -- won't error, and will update once a tick\nend\n\nplayer:isGliding() -- will error\n")),(0,l.kt)("h2",{id:"player-transformations"},"Player Transformations"),(0,l.kt)("h3",{id:"getpos"},"getPos"),(0,l.kt)("p",null,"Gets the position of the entity in the world"),(0,l.kt)("p",null,"If delta is passed in, then it will be used to linearly interpolate the position of the entity between the previous tick and the current tick"),(0,l.kt)("p",null,"The default value of delta is 1"),(0,l.kt)("h3",{id:"getrot"},"getRot"),(0,l.kt)("p",null,"Gets the rotation of the entity in degrees"),(0,l.kt)("p",null,"If delta is passed in, then it will be used to linearly interpolate the rotation of the entity between the previous tick and the current tick"),(0,l.kt)("p",null,"The default value of delta is 1"),(0,l.kt)("h3",{id:"getbodyyaw"},"getBodyYaw"),(0,l.kt)("p",null,"Gets the yaw of this entity's body in degrees"),(0,l.kt)("p",null,"If delta is passed in, then it will be used to linearly interpolate the rotation of the body between the previous tick and the current tick"),(0,l.kt)("p",null,"The default value of delta is 1"),(0,l.kt)("h3",{id:"getlookdir"},"getLookDir"),(0,l.kt)("p",null,"Returns a unit vector pointing in the direction that this entity is looking"),(0,l.kt)("p",null,"See the blue line in the F3+B screen for an example"),(0,l.kt)("h3",{id:"getvelocity"},"getVelocity"),(0,l.kt)("p",null,"Gets the current velocity of this entity in world coordinates, calculated as its position this tick minus its position last tick"),(0,l.kt)("h2",{id:"player-actions"},"Player Actions"),(0,l.kt)("h3",{id:"getpose"},"getPose"),(0,l.kt)("p",null,"Returns the current pose of the player"),(0,l.kt)("p",null,'For players this can be one of: "STANDING", "FALL_FLYING", "SLEEPING", "SWIMMING", "SPIN_ATTACK", or "CROUCHING"'),(0,l.kt)("h3",{id:"iscrouching"},"isCrouching"),(0,l.kt)("p",null,"Returns true if this entity is visually sneaking"),(0,l.kt)("h3",{id:"isgliding"},"isGliding"),(0,l.kt)("p",null,"Returns if this entity is gliding with an elytra"),(0,l.kt)("h3",{id:"isfishing"},"isFishing"),(0,l.kt)("p",null,"Returns if the player is currently fishing"),(0,l.kt)("h3",{id:"isblocking"},"isBlocking"),(0,l.kt)("p",null,"Return if this entity is blocking with a shield"),(0,l.kt)("h3",{id:"isvisuallyswimming"},"isVisuallySwimming"),(0,l.kt)("p",null,"Returns if this entity have the swimming pose"),(0,l.kt)("h3",{id:"isclimbing"},"isClimbing"),(0,l.kt)("p",null,"Returns true if the entity is currently using a climbable block, like a ladder or vine"),(0,l.kt)("h3",{id:"issneaking"},"isSneaking"),(0,l.kt)("p",null,"Returns true if this entity is logically sneaking (can't fall from blocks edges, can't see nameplate behind walls, etc)"),(0,l.kt)("h3",{id:"issprinting"},"isSprinting"),(0,l.kt)("p",null,"Returns true if this entity is currently sprinting"),(0,l.kt)("h3",{id:"riptidespinning"},"riptideSpinning"),(0,l.kt)("p",null,"Returns if this entity is riptide spinning"),(0,l.kt)("h2",{id:"player-data"},"Player Data"),(0,l.kt)("h3",{id:"isloaded"},"isLoaded"),(0,l.kt)("p",null,"Checks if this entity object is still being updated and loaded"),(0,l.kt)("p",null,"A non loaded entity would be someone who is in another dimension or out of the render distance for example"),(0,l.kt)("h3",{id:"getnbt"},"getNbt"),(0,l.kt)("p",null,"Gets a table containing the NBT of this entity"),(0,l.kt)("p",null,"Please note that not all values in the entity's NBT may be synced, as some are handled only on server side"),(0,l.kt)("h3",{id:"getchargedattackdelay"},"getChargedAttackDelay"),(0,l.kt)("p",null,"Returns the delay (in ticks) of charged attacks"),(0,l.kt)("h3",{id:"getexperienceprogress"},"getExperienceProgress"),(0,l.kt)("p",null,"Gets the progress of the way towards the player's next level, as a value from 0 to 1"),(0,l.kt)("h3",{id:"getexperiencelevel"},"getExperienceLevel"),(0,l.kt)("p",null,"Gets the player's current level"),(0,l.kt)("h3",{id:"getshoulderentity"},"getShoulderEntity"),(0,l.kt)("p",null,"Returns a table of the nbt of this entity left or right shoulder entity"),(0,l.kt)("h3",{id:"getteaminfo"},"getTeamInfo"),(0,l.kt)("p",null,"Returns a table with information about the team of this player"),(0,l.kt)("p",null,"Returns nil if the player doesnt have a team"),(0,l.kt)("h3",{id:"getfood"},"getFood"),(0,l.kt)("p",null,"Gets the current food level of the player, from 0 to 20"),(0,l.kt)("h3",{id:"getgamemode"},"getGamemode"),(0,l.kt)("p",null,'Returns "SURVIVAL", "CREATIVE", "ADVENTURE", or "SPECTATOR" depending on the player\'s gamemode'),(0,l.kt)("p",null,"If the gamemode is unknown, returns nil"),(0,l.kt)("h3",{id:"getsaturation"},"getSaturation"),(0,l.kt)("p",null,"Gets the current saturation level of the player"),(0,l.kt)("h3",{id:"getexhaustion"},"getExhaustion"),(0,l.kt)("p",null,"Gets the current exhaustion level of the player"),(0,l.kt)("h3",{id:"getabsorptionamount"},"getAbsorptionAmount"),(0,l.kt)("p",null,"Returns the amount of this entity's absorption (yellow hearts)"),(0,l.kt)("h3",{id:"getarmor"},"getArmor"),(0,l.kt)("p",null,"Returns the amount of armor points this entity has"),(0,l.kt)("h3",{id:"getmaxhealth"},"getMaxHealth"),(0,l.kt)("p",null,"Returns the maximum amount of health this entity can have"),(0,l.kt)("h3",{id:"gethealth"},"getHealth"),(0,l.kt)("p",null,"Returns the amount of health this entity has remaining"),(0,l.kt)("h3",{id:"getdeathtime"},"getDeathTime"),(0,l.kt)("p",null,"Returns the number of ticks this entity has been dead for"),(0,l.kt)("h3",{id:"getstingercount"},"getStingerCount"),(0,l.kt)("p",null,"Returns the number of bee stingers sticking out of this entity"),(0,l.kt)("h3",{id:"getarrowcount"},"getArrowCount"),(0,l.kt)("p",null,"Returns the number of arrows sticking out of this entity"),(0,l.kt)("h3",{id:"getentitycategory"},"getEntityCategory"),(0,l.kt)("p",null,"Returns the category of this entity"),(0,l.kt)("p",null,'The categories are: "ARTHROPOD", "UNDEAD", "WATER", "ILLAGER" and by default, "UNDEFINED"'),(0,l.kt)("h3",{id:"issensitivetowater"},"isSensitiveToWater"),(0,l.kt)("p",null,"Returns if this entity takes damage to water"),(0,l.kt)("h3",{id:"getname"},"getName"),(0,l.kt)("p",null,"Gets the name of this entity, if it has a custom name"),(0,l.kt)("p",null,"If it doesn't, returns a translated form of getType()"),(0,l.kt)("h3",{id:"isalive"},"isAlive"),(0,l.kt)("p",null,"Returns whether this entity is alive or not"),(0,l.kt)("h3",{id:"gettype"},"getType"),(0,l.kt)("p",null,"Gets the Minecraft identifier of this entity"),(0,l.kt)("p",null,'For instance, "minecraft:pig"'),(0,l.kt)("h3",{id:"getcontrolledvehicle"},"getControlledVehicle"),(0,l.kt)("p",null,"Return the vehicle that this entity is controlling"),(0,l.kt)("h3",{id:"getcontrollingpassenger"},"getControllingPassenger"),(0,l.kt)("p",null,"Returns the entity that is controlling this entity"),(0,l.kt)("h3",{id:"getpassengers"},"getPassengers"),(0,l.kt)("p",null,"Returns a List of entities of all passengers this entity have"),(0,l.kt)("h3",{id:"getfrozenticks"},"getFrozenTicks"),(0,l.kt)("p",null,"Gets the number of ticks this entity has been freezing in powder snow for"),(0,l.kt)("h3",{id:"getmaxair"},"getMaxAir"),(0,l.kt)("p",null,"Gets the maximum amount of air this entity can have"),(0,l.kt)("h3",{id:"getdimensionname"},"getDimensionName"),(0,l.kt)("p",null,"Gets the Minecraft identifier of the dimension this entity is in"),(0,l.kt)("h3",{id:"isunderwater"},"isUnderwater"),(0,l.kt)("p",null,"Returns true if this entity's eyes are touching water"),(0,l.kt)("h3",{id:"isinwater"},"isInWater"),(0,l.kt)("p",null,"Returns true if this entity is currently in a water block, including waterlogging"),(0,l.kt)("h3",{id:"isinrain"},"isInRain"),(0,l.kt)("p",null,"Returns true if this entity is currently standing in rain"),(0,l.kt)("h3",{id:"iswet"},"isWet"),(0,l.kt)("p",null,"Returns true in any of three conditions: if the entity is in water, if the entity is in rain, or if the entity is in a bubble column"),(0,l.kt)("p",null,"Otherwise, returns false"),(0,l.kt)("h3",{id:"isinlava"},"isInLava"),(0,l.kt)("p",null,"Returns true if this entity is currently in lava"),(0,l.kt)("h3",{id:"isonfire"},"isOnFire"),(0,l.kt)("p",null,"Returns true if this entity is currently on fire"),(0,l.kt)("h3",{id:"isinvisible"},"isInvisible"),(0,l.kt)("p",null,"Returns true if this entity is invisible, for one reason or another"),(0,l.kt)("h3",{id:"getvehicle"},"getVehicle"),(0,l.kt)("p",null,"Returns a proxy for the entity that this player is currently riding"),(0,l.kt)("p",null,"If the player isn't riding anything, returns nil"),(0,l.kt)("p",null,"Example combined with getType and with a nil check, the first ",(0,l.kt)("code",null,"player:getVehicle()")," is preventing a nil value from being check by ",(0,l.kt)("code",null,"getType()")," after the and:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'if player:getVehicle() and player:getVehicle():getType() == "minecraft:pig" then\n    log("You\'re riding a pig")\nend\n')),(0,l.kt)("h3",{id:"issilent"},"isSilent"),(0,l.kt)("p",null,"Returns true if this entity is silent"),(0,l.kt)("h3",{id:"isglowing"},"isGlowing"),(0,l.kt)("p",null,"Returns true if this entity is currently glowing"),(0,l.kt)("h3",{id:"getboundingbox"},"getBoundingBox"),(0,l.kt)("p",null,"Returns the size of this entity's bounding box as a Vector3"),(0,l.kt)("p",null,"{x, y, z} are the width, height, and width"),(0,l.kt)("p",null,"Minecraft entity hitboxes always have square bases"),(0,l.kt)("h3",{id:"isonground"},"isOnGround"),(0,l.kt)("p",null,"Returns whether or not this entity is currently on the ground"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"Note:"))," Due to a glitch in Minecraft's code this function is unreliable, and will misfire in multiple situations such as being underwater, standing on a boat, or standing on a slime block. One workaround is to check the blockstate of the block directly underneath the player like so: ",(0,l.kt)("code",null,"world.getBlockState(player:getPos():add(0,-0.1,0)):isSolidBlock()")),(0,l.kt)("h3",{id:"geteyey"},"getEyeY"),(0,l.kt)("p",null,"Returns the Y level of this entity's eyes"),(0,l.kt)("p",null,"Not to be confused with getEyeHeight, this function also takes the entity itself's Y position into account"),(0,l.kt)("h3",{id:"geteyeheight"},"getEyeHeight"),(0,l.kt)("p",null,"Returns the current eye height of this entity"),(0,l.kt)("h3",{id:"gettargetedentitynumber"},"getTargetedEntity(number)"),(0,l.kt)("p",null,"Returns a proxy for your currently targeted Entity"),(0,l.kt)("p",null,"This Entity appears on the F3 screen"),(0,l.kt)("p",null,"The number is for distance in blocks to check"),(0,l.kt)("p",null,"Maximum and Default distance is 20, Minimum is 0"),(0,l.kt)("p",null,"Example with a nil check:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'if player:getTargetedEntity(4.5) and player:getTargetedEntity(4.5):getType() == "minecraft:creeper" then\n    log("You\'re looking at a creeper")\nend\n')),(0,l.kt)("h3",{id:"gettargetedblockbool-number"},"getTargetedBlock(bool, number)"),(0,l.kt)("p",null,"Returns a proxy for your currently targeted BlockState"),(0,l.kt)("p",null,"This BlockState appears on the F3 screen"),(0,l.kt)("p",null,"The bool is for ignoring liquids and the number is the distance in blocks to check"),(0,l.kt)("p",null,"Maximum and Default distance is 20, Minimum is -20"),(0,l.kt)("p",null,"Returns a vararg of the block, the hit position and the block face the hit collided"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'if player:getTargetedBlock(true,4.5).id == "minecraft:grass_block" then\n    log("You\'re looking at grass")\nend\n')),(0,l.kt)("h3",{id:"hasinventory"},"hasInventory"),(0,l.kt)("p",null,"Checks if the entity has an inventory (Horses, Camels, Llamas, ...)"),(0,l.kt)("h3",{id:"hascontainer"},"hasContainer"),(0,l.kt)("p",null,"Checks if the entity has a container (Chest Boats, Minecarts with Chests, ...)"),(0,l.kt)("h3",{id:"isliving"},"isLiving"),(0,l.kt)("p",null,"Gets if this entity is a Living Entity"),(0,l.kt)("h3",{id:"isplayer"},"isPlayer"),(0,l.kt)("p",null,"Gets if this entity is a Player Entity"),(0,l.kt)("h3",{id:"getpermissionlevel"},"getPermissionLevel"),(0,l.kt)("p",null,"Returns the permission level number of this entity"),(0,l.kt)("p",null,"Server Operators, by default, have the permission level of 4"),(0,l.kt)("h2",{id:"vanilla-settings"},"Vanilla Settings"),(0,l.kt)("h3",{id:"getmodeltype"},"getModelType"),(0,l.kt)("p",null,'Returns "SLIM" or "DEFAULT", depending on the player\'s model type'),(0,l.kt)("h3",{id:"hascape"},"hasCape"),(0,l.kt)("p",null,"Returns whether the player has a cape loaded"),(0,l.kt)("h3",{id:"hasskin"},"hasSkin"),(0,l.kt)("p",null,"Returns whether the player has a custom skin loaded"),(0,l.kt)("h3",{id:"isskinlayervisible"},"isSkinLayerVisible"),(0,l.kt)("p",null,"Returns whether the specified skin layer, from the Skin Customizations settings, is currently visible"),(0,l.kt)("h2",{id:"item-functions"},"Item Functions"),(0,l.kt)("h3",{id:"getiteminteger"},"getItem(integer)"),(0,l.kt)("p",null,"Gets an ItemStack for the item in the given slot"),(0,l.kt)("p",null,"For the player, slots are indexed with 1 as the main hand, 2 as the off hand, and 3,4,5,6 as the 4 armor slots from the boots to the helmet"),(0,l.kt)("p",null,"If an invalid slot number is given, this will return nil"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'if player:getItem(5).id == "minecraft:elytra" then\n    log("You\'re wearing an elytra")\nend\n')),(0,l.kt)("h3",{id:"gethelditembool"},"getHeldItem(bool)"),(0,l.kt)("p",null,"Returns an ItemStack representing the item in this entity's main hand"),(0,l.kt)("p",null,'If true is passed in for "offhand", then it will instead look at the item in the entity\'s offhand'),(0,l.kt)("p",null,"If the entity isn't holding an item in that hand, returns air"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'if player:getHeldItem(false).id ~= "minecraft:air" then\n    log("Item in mainhand")\nend\nif player:getHeldItem(true).id ~= "minecraft:air" then\n    log("Item in offhand")\nend\n')),(0,l.kt)("h3",{id:"isusingitem"},"isUsingItem"),(0,l.kt)("p",null,"Returns true if the entity is currently using an item"),(0,l.kt)("h3",{id:"getactiveitem"},"getActiveItem"),(0,l.kt)("p",null,"Returns an ItemStack representing the item the entity is currently using"),(0,l.kt)("p",null,"If they're not using any item, returns air"),(0,l.kt)("h3",{id:"getactiveitemtime"},"getActiveItemTime"),(0,l.kt)("p",null,"Returns the ticks this entity's active item has been used for"),(0,l.kt)("h2",{id:"hand-functions"},"Hand Functions"),(0,l.kt)("h3",{id:"islefthanded"},"isLeftHanded"),(0,l.kt)("p",null,"Returns true if the entity's main hand is its left"),(0,l.kt)("h3",{id:"isswingingarm"},"isSwingingArm"),(0,l.kt)("p",null,"Returns true if the entity is currently swinging its arm"),(0,l.kt)("h3",{id:"getswingduration"},"getSwingDuration"),(0,l.kt)("p",null,"Returns the number of ticks this entity will have while swinging its arms"),(0,l.kt)("h3",{id:"getswingtime"},"getSwingTime"),(0,l.kt)("p",null,"Returns the number of ticks this entity has the arm swinging"),(0,l.kt)("h3",{id:"getactivehand"},"getActiveHand"),(0,l.kt)("p",null,'Returns "OFF_HAND" or "MAIN_HAND", depending on which hand this entity uses an item with'),(0,l.kt)("h3",{id:"getswingarm"},"getSwingArm"),(0,l.kt)("p",null,'Returns "OFF_HAND" or "MAIN_HAND", based on the arm this entity is currently swinging'),(0,l.kt)("h2",{id:"miscellaneous"},"Miscellaneous"),(0,l.kt)("h3",{id:"getipaddress"},"getIPAddress"),(0,l.kt)("p",null,"Returns this player's IP address"),(0,l.kt)("h3",{id:"getuuid"},"getUUID"),(0,l.kt)("p",null,"Gets the UUID of the proxied entity"),(0,l.kt)("h3",{id:"hasavatar"},"hasAvatar"),(0,l.kt)("p",null,"Returns true if Figura has an avatar loaded for this entity"),(0,l.kt)("h3",{id:"getvariable"},"getVariable"),(0,l.kt)("p",null,"Gets the value of a variable this entity stored in themselves using the Avatar api's store() function"))}g.isMDXComponent=!0}}]);